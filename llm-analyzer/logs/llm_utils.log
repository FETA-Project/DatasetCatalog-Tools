[2025-07-15 21:29:10,681:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:10,681:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
What is the title of the dataset?
Include only the dataset title in your response.
### Example:
CESNET-QUIC22


[2025-07-15 21:29:10,681:     INFO:        llm_utils.py:113 -            llm_query()] context is: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen
TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland
ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)
© The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or hereafter developed. The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does not imply, even in the absence of a specific statement, that such names are exempt from the relevant protective laws and regulations and therefore free for general use. The publisher, the authors, and the editors a

[2025-07-15 21:29:10,681:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
What is the title of the dataset?
Include only the dataset title in your response.
### Example:
CESNET-QUIC22


    Respond in a JSON format as provided.

    ### Text:
    
0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen
TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland
ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)
© The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or hereafter developed. The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication does not imply, even in the absence of a specific statement, that such names are exempt from the relevant protective laws and regulations and therefore free for general use. The publisher, the authors, and the editors a

[2025-07-15 21:29:14,967:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 4.29 s.
[2025-07-15 21:29:14,968:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {"dataset_title": "NordSec 2022 Proceedings"}
    			        		 	 

[2025-07-15 21:29:15,023:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:15,024:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
What year were the data collected?
Include only the year in your response.
### Example:
2022


[2025-07-15 21:29:15,024:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: 4.2 User-Topic Linking
The increasing and decreasing numbers (a and b), described in Sect.3.2, were tested using several values. We found that in the Twitter dataset, the best results can be produced for all userbases when a = 5 and b = 1. While in the Reddit dataset, the best values are a = 7 and b = 1.

search_document: 11
12
S. A. Gaballah et al.
machine equipped with a 16-core Intel Xeon E5-2640 v2 processor and 64GB of RAM.

search_document: timestamp, user id, and topic (hashtag/subreddit) at each record.

search_document: Datasets. The first dataset is a collection of records extracted from Twitter over the course of the entire month of November 2012 [13,19]. This dataset con- tains 22, 534, 846 tweets, 6, 914, 561 users, and 3,379,976 topics, referred to as hashtags. The second dataset is collected by us from Reddit for the entire month of October 2021. This dataset contains posts and comments from 1,638,157 dif- ferent users and 3,403 different topics, referred to as subreddits. Both datasets include a

search_document: Fig. 8. The impact of increasing the userbase size on the effectiveness of three methods in linking users to topics (sending rate group is (100 − 1,000), and round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: experiments on a

search_document: In Fig.8(a) and Fig.8(b), the effectiveness of the user-topic linking attack is studied using each of the three methods of computing topic scores, described in Sect.3.2. As demonstrated in both figures, any increase in the userbase leads to a significant decrease in the number of de-anonymized users. Furthermore, predictably, the attack is greatly influenced by the users’ sending rates, i.e.,
15
16
S. A. Gaballah et al.

search_document: Fig. 4. The distribution of users based on sending rates (userbase size = 1 million)

search_document: than 100 messages. That is because nearly 60% of users in the Twitter dataset post more than 100 messages, whereas there are only about 25% of users in the Reddit dataset who have similar sending rates, see Fig.4. In the Reddit dataset, for example, there are only five users who have sent more than 1,000 messages. The communication behaviors of these five users are also noticeably different, making it difficult to conceal each one’s behavior using delay. Nonetheless, it appears that cover

search_document: traffic is more effective in pro- tecting these users as shown in Fig.6(b).



[2025-07-15 21:29:15,024:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
What year were the data collected?
Include only the year in your response.
### Example:
2022


    Respond in a JSON format as provided.

    ### Text:
    
search_document: 4.2 User-Topic Linking
The increasing and decreasing numbers (a and b), described in Sect.3.2, were tested using several values. We found that in the Twitter dataset, the best results can be produced for all userbases when a = 5 and b = 1. While in the Reddit dataset, the best values are a = 7 and b = 1.

search_document: 11
12
S. A. Gaballah et al.
machine equipped with a 16-core Intel Xeon E5-2640 v2 processor and 64GB of RAM.

search_document: timestamp, user id, and topic (hashtag/subreddit) at each record.

search_document: Datasets. The first dataset is a collection of records extracted from Twitter over the course of the entire month of November 2012 [13,19]. This dataset con- tains 22, 534, 846 tweets, 6, 914, 561 users, and 3,379,976 topics, referred to as hashtags. The second dataset is collected by us from Reddit for the entire month of October 2021. This dataset contains posts and comments from 1,638,157 dif- ferent users and 3,403 different topics, referred to as subreddits. Both datasets include a

search_document: Fig. 8. The impact of increasing the userbase size on the effectiveness of three methods in linking users to topics (sending rate group is (100 − 1,000), and round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: experiments on a

search_document: In Fig.8(a) and Fig.8(b), the effectiveness of the user-topic linking attack is studied using each of the three methods of computing topic scores, described in Sect.3.2. As demonstrated in both figures, any increase in the userbase leads to a significant decrease in the number of de-anonymized users. Furthermore, predictably, the attack is greatly influenced by the users’ sending rates, i.e.,
15
16
S. A. Gaballah et al.

search_document: Fig. 4. The distribution of users based on sending rates (userbase size = 1 million)

search_document: than 100 messages. That is because nearly 60% of users in the Twitter dataset post more than 100 messages, whereas there are only about 25% of users in the Reddit dataset who have similar sending rates, see Fig.4. In the Reddit dataset, for example, there are only five users who have sent more than 1,000 messages. The communication behaviors of these five users are also noticeably different, making it difficult to conceal each one’s behavior using delay. Nonetheless, it appears that cover

search_document: traffic is more effective in pro- tecting these users as shown in Fig.6(b).



[2025-07-15 21:29:17,793:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.77 s.
[2025-07-15 21:29:17,795:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "data_collection_year": "2012" }
         											

[2025-07-15 21:29:17,837:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:17,837:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
Write a description of the dataset on 5 sentences from information included in the paper.
Focus on the network dataset in question.
### Example:
TLS capture from CESNET2 backbone network over one year. The capture was done using high-speed monitoring probes at the perimeter of CESNET2 network. This dataset provides realistic characteristics of traffic originating from various web browsers, operating systems, mobile devices, desktop machines, and both HTTP/1.1 and HTTP/2 protocols.


[2025-07-15 21:29:17,837:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: The second and third methods produce significantly better results than the first method, see Fig.8(a) and Fig.8(b). Since the irrelevant topics are filtered out in the second and third methods by decreasing the scores of topics that are active when the user is offline. The third method appears to behave similarly to the second, implying that lowering the scores of inactive topics when the user is online has little effect on the results.

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).



[2025-07-15 21:29:17,837:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
Write a description of the dataset on 5 sentences from information included in the paper.
Focus on the network dataset in question.
### Example:
TLS capture from CESNET2 backbone network over one year. The capture was done using high-speed monitoring probes at the perimeter of CESNET2 network. This dataset provides realistic characteristics of traffic originating from various web browsers, operating systems, mobile devices, desktop machines, and both HTTP/1.1 and HTTP/2 protocols.


    Respond in a JSON format as provided.

    ### Text:
    
search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: The second and third methods produce significantly better results than the first method, see Fig.8(a) and Fig.8(b). Since the irrelevant topics are filtered out in the second and third methods by decreasing the scores of topics that are active when the user is offline. The third method appears to behave similarly to the second, implying that lowering the scores of inactive topics when the user is online has little effect on the results.

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).



[2025-07-15 21:29:22,829:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 4.99 s.
[2025-07-15 21:29:22,830:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

    	"description": "The paper presents a comprehensive analysis of network data collected from Reddit and Twitter platforms over a one-year period. The dataset is generated using advanced monitoring probes installed across the perimeters of these social networks to capture detailed traffic information."

   	}

   	 	 					 	 					

[2025-07-15 21:29:22,865:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:22,865:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
What tool was used to collect the dataset?
Include only the name of the tool used.
### Example:
ipfixprobe


[2025-07-15 21:29:22,865:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: 11
12
S. A. Gaballah et al.
machine equipped with a 16-core Intel Xeon E5-2640 v2 processor and 64GB of RAM.

search_document: timestamp, user id, and topic (hashtag/subreddit) at each record.

search_document: Datasets. The first dataset is a collection of records extracted from Twitter over the course of the entire month of November 2012 [13,19]. This dataset con- tains 22, 534, 846 tweets, 6, 914, 561 users, and 3,379,976 topics, referred to as hashtags. The second dataset is collected by us from Reddit for the entire month of October 2021. This dataset contains posts and comments from 1,638,157 dif- ferent users and 3,403 different topics, referred to as subreddits. Both datasets include a

search_document: experiments on a

search_document: Fig. 4. The distribution of users based on sending rates (userbase size = 1 million)

search_document: Step 1. Creating the initial anonymity set.
Let Pui be the set of potential pseudonyms for ui (anonymity set). Initially, it includes every pj that publish messages in rx for the first time while at the same time ui is online for the first time as well. Additionally, pj has published the same or a fewer amount of messages compared to the number of messages sent by ui, i.e., Mpj
≤ Mui.
Intersection Attacks on Anonymous Microblogging
Step 2. Verifying whether p(cid:3) is in Pui.

search_document: Figure2 shows a simple example of the proposed method. In this example, we assume a group of four users U = {u1,u2,u3,u4} publishing during four rounds R = {r1,r2,r3,r4}, and the goal is to determine each user’s pseudonym. A can learn the following over each round:
r1: Pu1 = {p2,p3}, Pu2 = {p2,p3}, Pu3 = {p2,p3} ◦ r2: Pu1 = {p1,p3,p4}, Pu2 = {p2}, Pu3 = {p1,p3,p4}, Pu4 = {p1,p4} ◦ r3: Pu1 = {p1,p3,p4}, Pu2 = {p2}, Pu3 = {p1,p3}, Pu4 = {p1,p4} ◦ r4: Pu1 = {p1}, Pu2 = {p2}, Pu3 = {p3}, Pu4 = {p4}

search_document: Pui: – it is online while ui is offline. – Mpl – it is offline while ui is online and the number of online users is the same as the number of online pseudonyms, i.e., p(cid:3) is definitely online in this particular round. (When this happens, the flag f must be set to true.)
> Mui.
(b) If ui is online and f is false, A adds to Pui every pseudonym pj that is
online for the first time, and Mpj
≤ Mui.
Step 4. Repeat Step 3 until: pseudonym (p(cid:3)).
the flag f is true and Pui contains only one

search_document: A compares the total number of online users to the total number of online pseudonyms during rx. If they are equal, it means all online users published real messages, so Pui definitely includes p(cid:3). In such a case, a flag f is set to true, which indicates that no new pseudonyms can be added to Pui.
Step 3. Updating Pui during every subsequent round.
(a) Every pl that fulfills one of the following conditions will be removed from

search_document: rounds. In other words, A can track pseudonyms in Pui which are online while ui is offline and excludes them from Pui which might lead to faster convergence:



[2025-07-15 21:29:22,865:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
What tool was used to collect the dataset?
Include only the name of the tool used.
### Example:
ipfixprobe


    Respond in a JSON format as provided.

    ### Text:
    
search_document: 11
12
S. A. Gaballah et al.
machine equipped with a 16-core Intel Xeon E5-2640 v2 processor and 64GB of RAM.

search_document: timestamp, user id, and topic (hashtag/subreddit) at each record.

search_document: Datasets. The first dataset is a collection of records extracted from Twitter over the course of the entire month of November 2012 [13,19]. This dataset con- tains 22, 534, 846 tweets, 6, 914, 561 users, and 3,379,976 topics, referred to as hashtags. The second dataset is collected by us from Reddit for the entire month of October 2021. This dataset contains posts and comments from 1,638,157 dif- ferent users and 3,403 different topics, referred to as subreddits. Both datasets include a

search_document: experiments on a

search_document: Fig. 4. The distribution of users based on sending rates (userbase size = 1 million)

search_document: Step 1. Creating the initial anonymity set.
Let Pui be the set of potential pseudonyms for ui (anonymity set). Initially, it includes every pj that publish messages in rx for the first time while at the same time ui is online for the first time as well. Additionally, pj has published the same or a fewer amount of messages compared to the number of messages sent by ui, i.e., Mpj
≤ Mui.
Intersection Attacks on Anonymous Microblogging
Step 2. Verifying whether p(cid:3) is in Pui.

search_document: Figure2 shows a simple example of the proposed method. In this example, we assume a group of four users U = {u1,u2,u3,u4} publishing during four rounds R = {r1,r2,r3,r4}, and the goal is to determine each user’s pseudonym. A can learn the following over each round:
r1: Pu1 = {p2,p3}, Pu2 = {p2,p3}, Pu3 = {p2,p3} ◦ r2: Pu1 = {p1,p3,p4}, Pu2 = {p2}, Pu3 = {p1,p3,p4}, Pu4 = {p1,p4} ◦ r3: Pu1 = {p1,p3,p4}, Pu2 = {p2}, Pu3 = {p1,p3}, Pu4 = {p1,p4} ◦ r4: Pu1 = {p1}, Pu2 = {p2}, Pu3 = {p3}, Pu4 = {p4}

search_document: Pui: – it is online while ui is offline. – Mpl – it is offline while ui is online and the number of online users is the same as the number of online pseudonyms, i.e., p(cid:3) is definitely online in this particular round. (When this happens, the flag f must be set to true.)
> Mui.
(b) If ui is online and f is false, A adds to Pui every pseudonym pj that is
online for the first time, and Mpj
≤ Mui.
Step 4. Repeat Step 3 until: pseudonym (p(cid:3)).
the flag f is true and Pui contains only one

search_document: A compares the total number of online users to the total number of online pseudonyms during rx. If they are equal, it means all online users published real messages, so Pui definitely includes p(cid:3). In such a case, a flag f is set to true, which indicates that no new pseudonyms can be added to Pui.
Step 3. Updating Pui during every subsequent round.
(a) Every pl that fulfills one of the following conditions will be removed from

search_document: rounds. In other words, A can track pseudonyms in Pui which are online while ui is offline and excludes them from Pui which might lead to faster convergence:



[2025-07-15 21:29:26,163:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 3.30 s.
[2025-07-15 21:29:26,164:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "data_collection_tool": "ipfixprobe" }
             					  

[2025-07-15 21:29:26,198:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:26,198:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
What feature extraction tool was used for the dataset?
If no tool was used, then reply "unknown".
Include only the name of the tool used.
Example:
ipfixprobe PSTATS, TLS


[2025-07-15 21:29:26,198:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: WearSec: Towards Automated Security Evaluation of Wireless Wearable Devices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
Bernhards Blumbergs, ¯Eriks Dobelis, P¯eteris Paikens, Krišj¯anis Nesenbergs, Kirils Solovjovs, and Artis Ruši¸nš
Contents
Forensics

search_document: Obfuscation-Resilient Semantic Functionality Identification Through Program Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
Sebastian Schrittwieser, Patrick Kochberger, Michael Pucher, Caroline Lawitschka, Philip König, and Edgar R. Weippl
Malware Analysis with Symbolic Execution and Graph Kernel . . . . . . . . . . . . . . . 292
Charles-Henry Bertrand Van Ouytsel and Axel Legay

search_document: Richard Plný, Karel Hynek, and Tomáš ˇCejka
. . . . . . . . . . . . . . . . 139
Detection of Voice Conversion Spoofing Attacks Using Voiced Speech . . . . . . . . 159
Arun Sankar Muttathu Sivasankara Pillai, Phillip L. De Leon, and Utz Roedig
xii
Contents
A Wide Network Scanning for Discovery of UDP-Based Reflectors in the Nordic Countries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176

search_document: Sarah Abdelwahab Gaballah(B) Ephraim Zimmer
, Lamya Abdullah , Minh Tung Tran , , and Max M¨uhlh¨auser
Telecooperation Lab (TK), Technical University of Darmstadt, Darmstadt, Germany {gaballah,abdullah,max}@tk.tu-darmstadt.de, minhtung.tran@stud.tu-darmstadt.de, zimmer@privacy-trust.tu-darmstadt.de

search_document: Azadeh Tabiban, Heyang Zhao, Yosr Jarraya, Makan Pourzandi, and Lingyu Wang
Actionable Cyber Threat Intelligence for Automated Incident Response . . . . . . . 368
Cristoffer Leite, Jerry den Hartog, Daniel Ricardo dos Santos, and Elisa Costante
Author Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
xiii
Privacy
On the Effectiveness of Intersection Attacks in Anonymous Microblogging

search_document: Honeysweeper: Towards Stealthy Honeytoken Fingerprinting Techniques . . . . . . 101
Mohamed Msaad, Shreyas Srinivasa, Mikkel M. Andersen, David H. Audran, Charity U. Orji, and Emmanouil Vasilomanolakis
Towards Self-monitoring Enclaves: Side-Channel Detection Using Performance Counters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
David Lantz, Felipe Boeira, and Mikael Asplund
DeCrypto: Finding Cryptocurrency Miners on ISP Networks

search_document: Alexander Bjerre, Andreas Philip Westh, Emil Villefrance, A S M Farhan Al Haque, Jonas Bukrinski Andersen, Lucas K. Helgogaard, and Marios Anagnostopoulos
GPU-FAN: Leaking Sensitive Data from Air-Gapped Machines via Covert Noise from GPU Fans . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
Mordechai Guri
Secure Protocols and Systems

search_document: Simplex: Repurposing Intel Memory Protection Extensions for Secure Storage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Matthew Cole and Aravind Prakash
Automatic Implementations Synthesis of Secure Protocols and Attacks from Abstract Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234

search_document: Maraudrone’s Map: An Interactive Web Application for Forensic Analysis and Visualization of DJI Drone Log Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
Tobias Latzo, Andreas Hellmich, Annika Knepper, Lukas Hardi, Tim Phillip Castello-Waldow, Felix Freiling, and Andreas Attenberger
VinciDecoder: Automatically Interpreting Provenance Graphs into Textual Forensic Reports with Application to OpenStack . . . . . . . . . . . . . . . . . . . . . . . . . . . 346

search_document: Local Differential Privacy for Private Construction of Classification Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
Mina Alishahi, Daan Gast, and Sam Vermeiren
IMSI Probing: Possibilities and Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
80
Daniel Fraunholz, Dominik Brunke, Simon Beidenhauser, Sebastian Berger, Hartmut Koenig, and Daniel Reti
Attacks and Attack Detection



[2025-07-15 21:29:26,199:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
What feature extraction tool was used for the dataset?
If no tool was used, then reply "unknown".
Include only the name of the tool used.
Example:
ipfixprobe PSTATS, TLS


    Respond in a JSON format as provided.

    ### Text:
    
search_document: WearSec: Towards Automated Security Evaluation of Wireless Wearable Devices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
Bernhards Blumbergs, ¯Eriks Dobelis, P¯eteris Paikens, Krišj¯anis Nesenbergs, Kirils Solovjovs, and Artis Ruši¸nš
Contents
Forensics

search_document: Obfuscation-Resilient Semantic Functionality Identification Through Program Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
Sebastian Schrittwieser, Patrick Kochberger, Michael Pucher, Caroline Lawitschka, Philip König, and Edgar R. Weippl
Malware Analysis with Symbolic Execution and Graph Kernel . . . . . . . . . . . . . . . 292
Charles-Henry Bertrand Van Ouytsel and Axel Legay

search_document: Richard Plný, Karel Hynek, and Tomáš ˇCejka
. . . . . . . . . . . . . . . . 139
Detection of Voice Conversion Spoofing Attacks Using Voiced Speech . . . . . . . . 159
Arun Sankar Muttathu Sivasankara Pillai, Phillip L. De Leon, and Utz Roedig
xii
Contents
A Wide Network Scanning for Discovery of UDP-Based Reflectors in the Nordic Countries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176

search_document: Sarah Abdelwahab Gaballah(B) Ephraim Zimmer
, Lamya Abdullah , Minh Tung Tran , , and Max M¨uhlh¨auser
Telecooperation Lab (TK), Technical University of Darmstadt, Darmstadt, Germany {gaballah,abdullah,max}@tk.tu-darmstadt.de, minhtung.tran@stud.tu-darmstadt.de, zimmer@privacy-trust.tu-darmstadt.de

search_document: Azadeh Tabiban, Heyang Zhao, Yosr Jarraya, Makan Pourzandi, and Lingyu Wang
Actionable Cyber Threat Intelligence for Automated Incident Response . . . . . . . 368
Cristoffer Leite, Jerry den Hartog, Daniel Ricardo dos Santos, and Elisa Costante
Author Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
xiii
Privacy
On the Effectiveness of Intersection Attacks in Anonymous Microblogging

search_document: Honeysweeper: Towards Stealthy Honeytoken Fingerprinting Techniques . . . . . . 101
Mohamed Msaad, Shreyas Srinivasa, Mikkel M. Andersen, David H. Audran, Charity U. Orji, and Emmanouil Vasilomanolakis
Towards Self-monitoring Enclaves: Side-Channel Detection Using Performance Counters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
David Lantz, Felipe Boeira, and Mikael Asplund
DeCrypto: Finding Cryptocurrency Miners on ISP Networks

search_document: Alexander Bjerre, Andreas Philip Westh, Emil Villefrance, A S M Farhan Al Haque, Jonas Bukrinski Andersen, Lucas K. Helgogaard, and Marios Anagnostopoulos
GPU-FAN: Leaking Sensitive Data from Air-Gapped Machines via Covert Noise from GPU Fans . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
Mordechai Guri
Secure Protocols and Systems

search_document: Simplex: Repurposing Intel Memory Protection Extensions for Secure Storage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
Matthew Cole and Aravind Prakash
Automatic Implementations Synthesis of Secure Protocols and Attacks from Abstract Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234

search_document: Maraudrone’s Map: An Interactive Web Application for Forensic Analysis and Visualization of DJI Drone Log Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329
Tobias Latzo, Andreas Hellmich, Annika Knepper, Lukas Hardi, Tim Phillip Castello-Waldow, Felix Freiling, and Andreas Attenberger
VinciDecoder: Automatically Interpreting Provenance Graphs into Textual Forensic Reports with Application to OpenStack . . . . . . . . . . . . . . . . . . . . . . . . . . . 346

search_document: Local Differential Privacy for Private Construction of Classification Algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
Mina Alishahi, Daan Gast, and Sam Vermeiren
IMSI Probing: Possibilities and Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
80
Daniel Fraunholz, Dominik Brunke, Simon Beidenhauser, Sebastian Berger, Hartmut Koenig, and Daniel Reti
Attacks and Attack Detection



[2025-07-15 21:29:31,723:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 5.52 s.
[2025-07-15 21:29:31,724:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "data_extraction_tool": "PSTATS" }

    					  					  		

[2025-07-15 21:29:31,757:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:31,757:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
Is the dataset collected from real environment, or generated?
Include only the response (yes or no).
### Example:
yes


[2025-07-15 21:29:31,757:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: The second and third methods produce significantly better results than the first method, see Fig.8(a) and Fig.8(b). Since the irrelevant topics are filtered out in the second and third methods by decreasing the scores of topics that are active when the user is offline. The third method appears to behave similarly to the second, implying that lowering the scores of inactive topics when the user is online has little effect on the results.

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).



[2025-07-15 21:29:31,757:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
Is the dataset collected from real environment, or generated?
Include only the response (yes or no).
### Example:
yes


    Respond in a JSON format as provided.

    ### Text:
    
search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: The second and third methods produce significantly better results than the first method, see Fig.8(a) and Fig.8(b). Since the irrelevant topics are filtered out in the second and third methods by decreasing the scores of topics that are active when the user is offline. The third method appears to behave similarly to the second, implying that lowering the scores of inactive topics when the user is online has little effect on the results.

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).



[2025-07-15 21:29:34,903:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 3.14 s.
[2025-07-15 21:29:34,903:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "real_dataset": "yes" }
                	 	 

[2025-07-15 21:29:34,937:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:34,937:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
How were the data annotated, manually or automatically?
### Example:
Automatic based on SNI field from TLS header.


[2025-07-15 21:29:34,937:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: 4.2 User-Topic Linking
The increasing and decreasing numbers (a and b), described in Sect.3.2, were tested using several values. We found that in the Twitter dataset, the best results can be produced for all userbases when a = 5 and b = 1. While in the Reddit dataset, the best values are a = 7 and b = 1.

search_document: traffic is more effective in pro- tecting these users as shown in Fig.6(b).

search_document: Fig. 8. The impact of increasing the userbase size on the effectiveness of three methods in linking users to topics (sending rate group is (100 − 1,000), and round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: than 100 messages. That is because nearly 60% of users in the Twitter dataset post more than 100 messages, whereas there are only about 25% of users in the Reddit dataset who have similar sending rates, see Fig.4. In the Reddit dataset, for example, there are only five users who have sent more than 1,000 messages. The communication behaviors of these five users are also noticeably different, making it difficult to conceal each one’s behavior using delay. Nonetheless, it appears that cover

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: In Fig.8(a) and Fig.8(b), the effectiveness of the user-topic linking attack is studied using each of the three methods of computing topic scores, described in Sect.3.2. As demonstrated in both figures, any increase in the userbase leads to a significant decrease in the number of de-anonymized users. Furthermore, predictably, the attack is greatly influenced by the users’ sending rates, i.e.,
15
16
S. A. Gaballah et al.



[2025-07-15 21:29:34,937:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
How were the data annotated, manually or automatically?
### Example:
Automatic based on SNI field from TLS header.


    Respond in a JSON format as provided.

    ### Text:
    
search_document: 4.2 User-Topic Linking
The increasing and decreasing numbers (a and b), described in Sect.3.2, were tested using several values. We found that in the Twitter dataset, the best results can be produced for all userbases when a = 5 and b = 1. While in the Reddit dataset, the best values are a = 7 and b = 1.

search_document: traffic is more effective in pro- tecting these users as shown in Fig.6(b).

search_document: Fig. 8. The impact of increasing the userbase size on the effectiveness of three methods in linking users to topics (sending rate group is (100 − 1,000), and round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: than 100 messages. That is because nearly 60% of users in the Twitter dataset post more than 100 messages, whereas there are only about 25% of users in the Reddit dataset who have similar sending rates, see Fig.4. In the Reddit dataset, for example, there are only five users who have sent more than 1,000 messages. The communication behaviors of these five users are also noticeably different, making it difficult to conceal each one’s behavior using delay. Nonetheless, it appears that cover

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: In Fig.8(a) and Fig.8(b), the effectiveness of the user-topic linking attack is studied using each of the three methods of computing topic scores, described in Sect.3.2. As demonstrated in both figures, any increase in the userbase leads to a significant decrease in the number of de-anonymized users. Furthermore, predictably, the attack is greatly influenced by the users’ sending rates, i.e.,
15
16
S. A. Gaballah et al.



[2025-07-15 21:29:38,317:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 3.38 s.
[2025-07-15 21:29:38,318:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "annotation": "manual"}
          	 					 	 

[2025-07-15 21:29:38,370:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:38,371:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
Are there any key_observations the dataset?
If you authors didn't mention any observations, respond "none".


[2025-07-15 21:29:38,371:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: microblogging. We use real-world datasets from Twitter and Red- dit to simulate realistic user communication behavior. We launch the attack to reveal the identity of the publishing user (i.e., de-anonymize the user), hence the posts and messages can be linked to the sending user. Using an intersection attack for the other direction, i.e., to discover which topic a user subscribed to is beyond our scope1.

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: We believe that answering these questions is critical to understand how and under what conditions intersection attacks are powerful. Additionally, this under- standing can facilitate and enhance the development of effective mitigation mea- sures to protect against intersection attacks in practical ACSs. In this paper, we address the aforementioned questions by investigating intersection attacks on two different messaging patterns: pseudonym-based and topic-based messaging of anonymous

search_document: Overall, the user-pseudonym linking attack is far more effective than the user- topic linking attack. That is mainly for two reasons. First, it is due to the many- to-many relationship between users and topics, whereas users and pseudonyms have a one-to-one relationship. The user may publish on various topics every round, and each topic can get messages from different users over rounds. The second reason is that some of the topics can be active for the majority of the time. Thus, it is

search_document: In this work, we consider an anonymous microblogging system that has a set of users U = {u1,u2,...un}. Each user, ui ∈ U, can independently decide how many messages to send, and when to send them. Thus, there are no agreements on com- munication behavior between users, which is closest to commonly used existing non-anonymous microblogging systems. All messages transmitted between users and the system are encrypted and padded to the same length i.e., they appear indistinguishable to any external

search_document: 1 It is noteworthy that a solution for this intersection attack direction has been addressed already by utilising broadcasting of published messages, i.e., sending every published message to all users, as seen in [1,4,5]. Nonetheless, broadcasting imposes a high communication overhead on users, which makes it an inefficient solution. Thus, more research in this area is clearly needed.
5
6
S. A. Gaballah et al.
2 Design and Assumptions

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: This paper is organized as follows: The assumptions, anonymous microblog- ging messaging patterns, and threat model are all introduced in Sect.2. Then, in Sect.3, we present our intersection attack for each messaging pattern. Following that, in Sect.4, we discuss the evaluation results of our experiments. Finally, Sect.5 concludes the paper and presents some points for future work.



[2025-07-15 21:29:38,371:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
Are there any key_observations the dataset?
If you authors didn't mention any observations, respond "none".


    Respond in a JSON format as provided.

    ### Text:
    
search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: microblogging. We use real-world datasets from Twitter and Red- dit to simulate realistic user communication behavior. We launch the attack to reveal the identity of the publishing user (i.e., de-anonymize the user), hence the posts and messages can be linked to the sending user. Using an intersection attack for the other direction, i.e., to discover which topic a user subscribed to is beyond our scope1.

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: We believe that answering these questions is critical to understand how and under what conditions intersection attacks are powerful. Additionally, this under- standing can facilitate and enhance the development of effective mitigation mea- sures to protect against intersection attacks in practical ACSs. In this paper, we address the aforementioned questions by investigating intersection attacks on two different messaging patterns: pseudonym-based and topic-based messaging of anonymous

search_document: Overall, the user-pseudonym linking attack is far more effective than the user- topic linking attack. That is mainly for two reasons. First, it is due to the many- to-many relationship between users and topics, whereas users and pseudonyms have a one-to-one relationship. The user may publish on various topics every round, and each topic can get messages from different users over rounds. The second reason is that some of the topics can be active for the majority of the time. Thus, it is

search_document: In this work, we consider an anonymous microblogging system that has a set of users U = {u1,u2,...un}. Each user, ui ∈ U, can independently decide how many messages to send, and when to send them. Thus, there are no agreements on com- munication behavior between users, which is closest to commonly used existing non-anonymous microblogging systems. All messages transmitted between users and the system are encrypted and padded to the same length i.e., they appear indistinguishable to any external

search_document: 1 It is noteworthy that a solution for this intersection attack direction has been addressed already by utilising broadcasting of published messages, i.e., sending every published message to all users, as seen in [1,4,5]. Nonetheless, broadcasting imposes a high communication overhead on users, which makes it an inefficient solution. Thus, more research in this area is clearly needed.
5
6
S. A. Gaballah et al.
2 Design and Assumptions

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: This paper is organized as follows: The assumptions, anonymous microblog- ging messaging patterns, and threat model are all introduced in Sect.2. Then, in Sect.3, we present our intersection attack for each messaging pattern. Following that, in Sect.4, we discuss the evaluation results of our experiments. Finally, Sect.5 concludes the paper and presents some points for future work.



[2025-07-15 21:29:42,903:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 4.53 s.
[2025-07-15 21:29:42,904:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "key_observations": "The dataset describes a study on user pseudonym linking attacks compared to user topic linking attacks, with key observations showing that the former is more effective due to one-to-one user-pseudonym relationships and lower overlap between users and topics." }

        	 					 	 		

[2025-07-15 21:29:42,942:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:42,943:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
Are there any known issues in the dataset?
If you authors didn't mention any known issues, respond "none".


[2025-07-15 21:29:42,943:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: In Fig.6(a) and Fig.6(b), we show the impact of using cover traffic on the number of identified users in the Twitter and Reddit datasets, respectively. According to our findings, sending random cover traffic increases the number of required observed rounds. However, it can only slightly reduce the number of de-anonymized users by the end of the observation period. For example, if users randomly send 10 dummy messages for every real message (i.e., ratio 10:1)—that definitely leads to high

search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: bandwidth overhead—, the adversary still can identify pseudonyms of over 70%, 80%, and 90% of users who send (10−100), (100−1,000), and (> 1,000) messages, respectively, see Fig.6(a). We think that the main reason behind the ineffectiveness of cover traffic in protecting the users is the randomness in generating and sending the dummy messages, which seems incapable of creating anonymity sets that can provide long-term protection for the users’ pseudonyms.

search_document: than 100 messages. That is because nearly 60% of users in the Twitter dataset post more than 100 messages, whereas there are only about 25% of users in the Reddit dataset who have similar sending rates, see Fig.4. In the Reddit dataset, for example, there are only five users who have sent more than 1,000 messages. The communication behaviors of these five users are also noticeably different, making it difficult to conceal each one’s behavior using delay. Nonetheless, it appears that cover

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: Fig. 7. The impact of delay on the number of de-anonymized users (userbase size = 1 million, and round length = 1h). (a) Twitter, (b) Reddit.
Intersection Attacks on Anonymous Microblogging

search_document: Overall, the user-pseudonym linking attack is far more effective than the user- topic linking attack. That is mainly for two reasons. First, it is due to the many- to-many relationship between users and topics, whereas users and pseudonyms have a one-to-one relationship. The user may publish on various topics every round, and each topic can get messages from different users over rounds. The second reason is that some of the topics can be active for the majority of the time. Thus, it is

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: In Fig.7(a) and Fig.7(b), we illustrate how delaying messages can help in degrading the effectiveness of the user-pseudonym linking attack. Since the adversary cannot learn the exact number of rounds for which a message has been delayed, it treats every message as if it has been postponed by d rounds. That results in very large anonymity sets, hence, it reduces the attack perfor- mance. Using the delay is more powerful on Twitter than on Reddit, especially for users with sending rate of more



[2025-07-15 21:29:42,943:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
Are there any known issues in the dataset?
If you authors didn't mention any known issues, respond "none".


    Respond in a JSON format as provided.

    ### Text:
    
search_document: In Fig.6(a) and Fig.6(b), we show the impact of using cover traffic on the number of identified users in the Twitter and Reddit datasets, respectively. According to our findings, sending random cover traffic increases the number of required observed rounds. However, it can only slightly reduce the number of de-anonymized users by the end of the observation period. For example, if users randomly send 10 dummy messages for every real message (i.e., ratio 10:1)—that definitely leads to high

search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: bandwidth overhead—, the adversary still can identify pseudonyms of over 70%, 80%, and 90% of users who send (10−100), (100−1,000), and (> 1,000) messages, respectively, see Fig.6(a). We think that the main reason behind the ineffectiveness of cover traffic in protecting the users is the randomness in generating and sending the dummy messages, which seems incapable of creating anonymity sets that can provide long-term protection for the users’ pseudonyms.

search_document: than 100 messages. That is because nearly 60% of users in the Twitter dataset post more than 100 messages, whereas there are only about 25% of users in the Reddit dataset who have similar sending rates, see Fig.4. In the Reddit dataset, for example, there are only five users who have sent more than 1,000 messages. The communication behaviors of these five users are also noticeably different, making it difficult to conceal each one’s behavior using delay. Nonetheless, it appears that cover

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: Fig. 7. The impact of delay on the number of de-anonymized users (userbase size = 1 million, and round length = 1h). (a) Twitter, (b) Reddit.
Intersection Attacks on Anonymous Microblogging

search_document: Overall, the user-pseudonym linking attack is far more effective than the user- topic linking attack. That is mainly for two reasons. First, it is due to the many- to-many relationship between users and topics, whereas users and pseudonyms have a one-to-one relationship. The user may publish on various topics every round, and each topic can get messages from different users over rounds. The second reason is that some of the topics can be active for the majority of the time. Thus, it is

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).

search_document: In Fig.7(a) and Fig.7(b), we illustrate how delaying messages can help in degrading the effectiveness of the user-pseudonym linking attack. Since the adversary cannot learn the exact number of rounds for which a message has been delayed, it treats every message as if it has been postponed by d rounds. That results in very large anonymity sets, hence, it reduces the attack perfor- mance. Using the delay is more powerful on Twitter than on Reddit, especially for users with sending rate of more



[2025-07-15 21:29:46,162:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 3.22 s.
[2025-07-15 21:29:46,163:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "known_issues": "None" }
      						 		     

[2025-07-15 21:29:46,204:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:46,204:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: Provided paper describes dataset of recorded network data flow.
What tags would you assign to this dataset?
Include only comma separated tags in your response.


[2025-07-15 21:29:46,204:     INFO:        llm_utils.py:113 -            llm_query()] context is: search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: The second and third methods produce significantly better results than the first method, see Fig.8(a) and Fig.8(b). Since the irrelevant topics are filtered out in the second and third methods by decreasing the scores of topics that are active when the user is offline. The third method appears to behave similarly to the second, implying that lowering the scores of inactive topics when the user is online has little effect on the results.

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).



[2025-07-15 21:29:46,205:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: Provided paper describes dataset of recorded network data flow.
What tags would you assign to this dataset?
Include only comma separated tags in your response.


    Respond in a JSON format as provided.

    ### Text:
    
search_document: The first method seems to be far more effective on Reddit than on Twitter, implying that updating the scores of topics during users’ offline rounds has less impact on Reddit than on Twitter. That is due to differences in the two datasets; e.g., Reddit has a smaller number of high popular topics compared to Twitter.

search_document: percentage of de-anonymized users to 51%, see Fig.9(a).

search_document: TU Dortmund University, Dortmund, Germany
Moti Yung
Columbia University, New York, NY, USA
13700
More information about this series at https://link.springer.com/bookseries/558
Hans P. Reiser · Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30–December 2, 2022 Proceedings
Editors Hans P. Reiser Reykjavik University Reykjavik, Iceland
Marcel Kyas Reykjavik University Reykjavik, Iceland

search_document: ISSN 0302-9743 Lecture Notes in Computer Science ISBN 978-3-031-22294-8 https://doi.org/10.1007/978-3-031-22295-5
ISSN 1611-3349 (electronic)
ISBN 978-3-031-22295-5 (eBook)

search_document: © The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG 2022 This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the material is concerned, specifically the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting, reproduction on microfilms or in any other physical way, and transmission or information storage and retrieval, electronic adaptation, computer

search_document: Figure9(a) and Fig.9(b) show the effect of delaying messages and generating cover messages on the percentage of de-anonymized users when method 3 is con- sidered. The delay, like in the first attack, is shown to be a better countermeasure than cover traffic. For example, if the userbase size is 10,000 and the maximum delay is 3 hours, the percentage of the de-anonymized users is reduced from 57% to 25%. While using five cover messages for each real message (i.e., 5:1) can only decrease the

search_document: The second and third methods produce significantly better results than the first method, see Fig.8(a) and Fig.8(b). Since the irrelevant topics are filtered out in the second and third methods by decreasing the scores of topics that are active when the user is offline. The third method appears to behave similarly to the second, implying that lowering the scores of inactive topics when the user is online has little effect on the results.

search_document: 0 0 7 3 1 S C N L
Hans P. Reiser Marcel Kyas (Eds.)
Secure IT Systems
27th Nordic Conference, NordSec 2022 Reykjavic, Iceland, November 30 – December 2, 2022 Proceedings
Lecture Notes in Computer Science
Founding Editors
Gerhard Goos
Karlsruhe Institute of Technology, Karlsruhe, Germany
Juris Hartmanis
Cornell University, Ithaca, NY, USA
Editorial Board Members
Elisa Bertino
Purdue University, West Lafayette, IN, USA
Wen Gao
Peking University, Beijing, China
Bernhard Steffen

search_document: Fig. 9. The impact of delay and cover traffic on the effectiveness of various methods in user-topic linking (sending rate group is (100 − 1,000), round length = 1h). (a) Twitter (a = 5, b = 1), (b) Reddit (a = 7, b = 1).



[2025-07-15 21:29:49,818:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 3.61 s.
[2025-07-15 21:29:49,819:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "tags": "dataset of recorded network data flow, online/offline user behavior analysis, effectiveness evaluation of different methods for user-topic linking" } 

[2025-07-15 21:29:50,235:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:50,235:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:29:50,235:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2024 20th International Conference on Network and Service Management (CNSM)
MFWDD: Model-based Feature Weight Drift Detection Showcased on TLS and QUIC Traffic
Luk´aˇs Janˇciˇcka1, Dominik Soukup1, Josef Koumar1, Filip Nˇemec1, and Tom´aˇs ˇCejka2
1Czech Technical University in Prague, Prague, Czech Republic 2CESNET, a.l.e., Prague, Czech Republic {janciluk, soukudom, koumajos, nemecfil}@fit.cvut.cz, cejkat@cesnet.cz
Abstract—Machine learning (ML) represents an efficient and popular approach for network traffic classification. However, network traffic inspection is a challenging domain and trained models may degrade soon after deployment. Besides biases present during data captures and model creation, data drifts contribute significantly to ML model degradation. This paper proposes a novel method called Model-based Feature Weight Drift Detection (MFWDD) for concept drift detection. It is a part of a public software framework suited for dataset drift analysis tailored to the domain of network traffic. This work addresses TLS and QUIC service classification problems, ex- amines a variety of experiments analyzing the evolution of the respective distributions, and observes their degradation over time on different ML features. The MFWDD framework guided TLS and QUIC services classification models retraining throughout an extensive period and not only prevented model degradation but also improved its performance and consistency over time.
Index Terms—Dataset quality, Traffic classification, Computer
network, Concept drift
A possible solution is the concept of Active Learning (AL), that updates underlying datasets. However, due to the dynam- icity of investigated network services, precise tuning of AL parameters is notoriously demanding.
to understand the behavior and importance of selected features in time, and the relationships between different features. This paper presents a method for well-timed drift detection and AL con- trol. ML-model retraining is a computationall

[2025-07-15 21:29:50,235:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
2024 20th International Conference on Network and Service Management (CNSM)
MFWDD: Model-based Feature Weight Drift Detection Showcased on TLS and QUIC Traffic
Luk´aˇs Janˇciˇcka1, Dominik Soukup1, Josef Koumar1, Filip Nˇemec1, and Tom´aˇs ˇCejka2
1Czech Technical University in Prague, Prague, Czech Republic 2CESNET, a.l.e., Prague, Czech Republic {janciluk, soukudom, koumajos, nemecfil}@fit.cvut.cz, cejkat@cesnet.cz
Abstract—Machine learning (ML) represents an efficient and popular approach for network traffic classification. However, network traffic inspection is a challenging domain and trained models may degrade soon after deployment. Besides biases present during data captures and model creation, data drifts contribute significantly to ML model degradation. This paper proposes a novel method called Model-based Feature Weight Drift Detection (MFWDD) for concept drift detection. It is a part of a public software framework suited for dataset drift analysis tailored to the domain of network traffic. This work addresses TLS and QUIC service classification problems, ex- amines a variety of experiments analyzing the evolution of the respective distributions, and observes their degradation over time on different ML features. The MFWDD framework guided TLS and QUIC services classification models retraining throughout an extensive period and not only prevented model degradation but also improved its performance and consistency over time.
Index Terms—Dataset quality, Traffic classification, Computer
network, Concept drift
A possible solution is the concept of Active Learning (AL), that updates underlying datasets. However, due to the dynam- icity of investigated network services, precise tuning of AL parameters is notoriously demanding.
to understand the behavior and importance of selected features in time, and the relationships between different features. This paper presents a method for well-timed drift detection and AL con- trol. ML-model retraining is a computationall

[2025-07-15 21:29:52,841:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.61 s.
[2025-07-15 21:29:52,842:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "paper_title": "MFWDD: Model-based Feature Weight Drift Detection Showcased on TLS and QUIC Traffic" }

    							 			 	 		

[2025-07-15 21:29:52,845:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:52,845:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:29:52,845:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2024 20th International Conference on Network and Service Management (CNSM)
MFWDD: Model-based Feature Weight Drift Detection Showcased on TLS and QUIC Traffic
Luk´aˇs Janˇciˇcka1, Dominik Soukup1, Josef Koumar1, Filip Nˇemec1, and Tom´aˇs ˇCejka2
1Czech Technical University in Prague, Prague, Czech Republic 2CESNET, a.l.e., Prague, Czech Republic {janciluk, soukudom, koumajos, nemecfil}@fit.cvut.cz, cejkat@cesnet.cz
Abstract—Machine learning (ML) represents an efficient and popular approach for network traffic classification. However, network traffic inspection is a challenging domain and trained models may degrade soon after deployment. Besides biases present during data captures and model creation, data drifts contribute significantly to ML model degradation. This paper proposes a novel method called Model-based Feature Weight Drift Detection (MFWDD) for concept drift detection. It is a part of a public software framework suited for dataset drift analysis tailored to the domain of network traffic. This work addresses TLS and QUIC service classification problems, ex- amines a variety of experiments analyzing the evolution of the respective distributions, and observes their degradation over time on different ML features. The MFWDD framework guided TLS and QUIC services classification models retraining throughout an extensive period and not only prevented model degradation but also improved its performance and consistency over time.
Index Terms—Dataset quality, Traffic classification, Computer
network, Concept drift
A possible solution is the concept of Active Learning (AL), that updates underlying datasets. However, due to the dynam- icity of investigated network services, precise tuning of AL parameters is notoriously demanding.
to understand the behavior and importance of selected features in time, and the relationships between different features. This paper presents a method for well-timed drift detection and AL con- trol. ML-model retraining is a computationall

[2025-07-15 21:29:52,845:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
2024 20th International Conference on Network and Service Management (CNSM)
MFWDD: Model-based Feature Weight Drift Detection Showcased on TLS and QUIC Traffic
Luk´aˇs Janˇciˇcka1, Dominik Soukup1, Josef Koumar1, Filip Nˇemec1, and Tom´aˇs ˇCejka2
1Czech Technical University in Prague, Prague, Czech Republic 2CESNET, a.l.e., Prague, Czech Republic {janciluk, soukudom, koumajos, nemecfil}@fit.cvut.cz, cejkat@cesnet.cz
Abstract—Machine learning (ML) represents an efficient and popular approach for network traffic classification. However, network traffic inspection is a challenging domain and trained models may degrade soon after deployment. Besides biases present during data captures and model creation, data drifts contribute significantly to ML model degradation. This paper proposes a novel method called Model-based Feature Weight Drift Detection (MFWDD) for concept drift detection. It is a part of a public software framework suited for dataset drift analysis tailored to the domain of network traffic. This work addresses TLS and QUIC service classification problems, ex- amines a variety of experiments analyzing the evolution of the respective distributions, and observes their degradation over time on different ML features. The MFWDD framework guided TLS and QUIC services classification models retraining throughout an extensive period and not only prevented model degradation but also improved its performance and consistency over time.
Index Terms—Dataset quality, Traffic classification, Computer
network, Concept drift
A possible solution is the concept of Active Learning (AL), that updates underlying datasets. However, due to the dynam- icity of investigated network services, precise tuning of AL parameters is notoriously demanding.
to understand the behavior and importance of selected features in time, and the relationships between different features. This paper presents a method for well-timed drift detection and AL con- trol. ML-model retraining is a computationall

[2025-07-15 21:29:55,550:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.70 s.
[2025-07-15 21:29:55,551:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {"publication_year": "]]<think>Alright, I need to figure out the year this paper was published based on the provided text. Let me look through the text carefully. The first line mentions " } 

[2025-07-15 21:29:57,982:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:29:57,982:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:29:57,982:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2024 20th International Conference on Network and Service Management (CNSM)
Certainly Uncertain: Demystifying ML Uncertainty for Active Learning in Network Monitoring Tasks
Katharina Dietz∗, Mehrdad Hajizadeh†, Nikolas Wehner∗, Stefan Geißler∗, Pedro Casas‡, Michael Seufert§, Tobias Hoßfeld∗ ∗University of W¨urzburg, Germany, †Technical University of Chemnitz, Germany ‡AIT Austrian Institute of Technology, Vienna, Austria, §University of Augsburg, Germany ∗{katharina.dietz, nikolas.wehner, stefan.geissler, tobias.hossfeld}@uni-wuerzburg.de, †mehrdad.hajizadeh@etit.tu-chemnitz.de, ‡pedro.casas@ait.ac.at, §michael.seufert@uni-a.de
Abstract—Artificial Intelligence (AI), particularly Machine Learning (ML), has become prominent in network monitoring, yet its practical adoption, such as for anomaly and intrusion de- tection, remains limited. Standard AI/ML methods often exclude experts, reducing trust and hindering practical implementations. Active Learning (AL) allows to integrate admins and their expert knowledge into the ML loop by leveraging expert-labeled data. Together with self-training and automated decisions, AL can enhance model performance, trust, and the ability to adapt to system changes. In this work, we evaluate uncertainty-based AL in network monitoring, offering a comprehensive parameter study for best practices in real-world AI/ML adoption. To this end, we evaluate stream-based and pool-based AL across four datasets for various monitoring use cases and conduct a parameter study on ten uncertainty measures, thereby identifying scenarios benefiting from self-training. By analyzing the impact of admin competence on model performance, we offer actionable guidelines towards the practical implementation of AL.
Index Terms—Active Learning, Machine Learning, Traffic
Classification, Intrusion Detection
I. INTRODUCTION
In the past decade, Artificial Intelligence (AI), especially Machine Learning (ML), has enjoyed increasing popularity and has been widely applied i

[2025-07-15 21:29:57,982:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
2024 20th International Conference on Network and Service Management (CNSM)
Certainly Uncertain: Demystifying ML Uncertainty for Active Learning in Network Monitoring Tasks
Katharina Dietz∗, Mehrdad Hajizadeh†, Nikolas Wehner∗, Stefan Geißler∗, Pedro Casas‡, Michael Seufert§, Tobias Hoßfeld∗ ∗University of W¨urzburg, Germany, †Technical University of Chemnitz, Germany ‡AIT Austrian Institute of Technology, Vienna, Austria, §University of Augsburg, Germany ∗{katharina.dietz, nikolas.wehner, stefan.geissler, tobias.hossfeld}@uni-wuerzburg.de, †mehrdad.hajizadeh@etit.tu-chemnitz.de, ‡pedro.casas@ait.ac.at, §michael.seufert@uni-a.de
Abstract—Artificial Intelligence (AI), particularly Machine Learning (ML), has become prominent in network monitoring, yet its practical adoption, such as for anomaly and intrusion de- tection, remains limited. Standard AI/ML methods often exclude experts, reducing trust and hindering practical implementations. Active Learning (AL) allows to integrate admins and their expert knowledge into the ML loop by leveraging expert-labeled data. Together with self-training and automated decisions, AL can enhance model performance, trust, and the ability to adapt to system changes. In this work, we evaluate uncertainty-based AL in network monitoring, offering a comprehensive parameter study for best practices in real-world AI/ML adoption. To this end, we evaluate stream-based and pool-based AL across four datasets for various monitoring use cases and conduct a parameter study on ten uncertainty measures, thereby identifying scenarios benefiting from self-training. By analyzing the impact of admin competence on model performance, we offer actionable guidelines towards the practical implementation of AL.
Index Terms—Active Learning, Machine Learning, Traffic
Classification, Intrusion Detection
I. INTRODUCTION
In the past decade, Artificial Intelligence (AI), especially Machine Learning (ML), has enjoyed increasing popularity and has been widely applied i

[2025-07-15 21:30:00,763:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.78 s.
[2025-07-15 21:30:00,765:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

     	 		"paper_title": "Certainly Uncertain: Demystifying ML Uncertainty for Active Learning in Network Monitoring Tasks"
}
    					         		

[2025-07-15 21:30:00,767:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:00,767:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:30:00,767:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2024 20th International Conference on Network and Service Management (CNSM)
Certainly Uncertain: Demystifying ML Uncertainty for Active Learning in Network Monitoring Tasks
Katharina Dietz∗, Mehrdad Hajizadeh†, Nikolas Wehner∗, Stefan Geißler∗, Pedro Casas‡, Michael Seufert§, Tobias Hoßfeld∗ ∗University of W¨urzburg, Germany, †Technical University of Chemnitz, Germany ‡AIT Austrian Institute of Technology, Vienna, Austria, §University of Augsburg, Germany ∗{katharina.dietz, nikolas.wehner, stefan.geissler, tobias.hossfeld}@uni-wuerzburg.de, †mehrdad.hajizadeh@etit.tu-chemnitz.de, ‡pedro.casas@ait.ac.at, §michael.seufert@uni-a.de
Abstract—Artificial Intelligence (AI), particularly Machine Learning (ML), has become prominent in network monitoring, yet its practical adoption, such as for anomaly and intrusion de- tection, remains limited. Standard AI/ML methods often exclude experts, reducing trust and hindering practical implementations. Active Learning (AL) allows to integrate admins and their expert knowledge into the ML loop by leveraging expert-labeled data. Together with self-training and automated decisions, AL can enhance model performance, trust, and the ability to adapt to system changes. In this work, we evaluate uncertainty-based AL in network monitoring, offering a comprehensive parameter study for best practices in real-world AI/ML adoption. To this end, we evaluate stream-based and pool-based AL across four datasets for various monitoring use cases and conduct a parameter study on ten uncertainty measures, thereby identifying scenarios benefiting from self-training. By analyzing the impact of admin competence on model performance, we offer actionable guidelines towards the practical implementation of AL.
Index Terms—Active Learning, Machine Learning, Traffic
Classification, Intrusion Detection
I. INTRODUCTION
In the past decade, Artificial Intelligence (AI), especially Machine Learning (ML), has enjoyed increasing popularity and has been widely applied i

[2025-07-15 21:30:00,767:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
2024 20th International Conference on Network and Service Management (CNSM)
Certainly Uncertain: Demystifying ML Uncertainty for Active Learning in Network Monitoring Tasks
Katharina Dietz∗, Mehrdad Hajizadeh†, Nikolas Wehner∗, Stefan Geißler∗, Pedro Casas‡, Michael Seufert§, Tobias Hoßfeld∗ ∗University of W¨urzburg, Germany, †Technical University of Chemnitz, Germany ‡AIT Austrian Institute of Technology, Vienna, Austria, §University of Augsburg, Germany ∗{katharina.dietz, nikolas.wehner, stefan.geissler, tobias.hossfeld}@uni-wuerzburg.de, †mehrdad.hajizadeh@etit.tu-chemnitz.de, ‡pedro.casas@ait.ac.at, §michael.seufert@uni-a.de
Abstract—Artificial Intelligence (AI), particularly Machine Learning (ML), has become prominent in network monitoring, yet its practical adoption, such as for anomaly and intrusion de- tection, remains limited. Standard AI/ML methods often exclude experts, reducing trust and hindering practical implementations. Active Learning (AL) allows to integrate admins and their expert knowledge into the ML loop by leveraging expert-labeled data. Together with self-training and automated decisions, AL can enhance model performance, trust, and the ability to adapt to system changes. In this work, we evaluate uncertainty-based AL in network monitoring, offering a comprehensive parameter study for best practices in real-world AI/ML adoption. To this end, we evaluate stream-based and pool-based AL across four datasets for various monitoring use cases and conduct a parameter study on ten uncertainty measures, thereby identifying scenarios benefiting from self-training. By analyzing the impact of admin competence on model performance, we offer actionable guidelines towards the practical implementation of AL.
Index Terms—Active Learning, Machine Learning, Traffic
Classification, Intrusion Detection
I. INTRODUCTION
In the past decade, Artificial Intelligence (AI), especially Machine Learning (ML), has enjoyed increasing popularity and has been widely applied i

[2025-07-15 21:30:03,236:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.47 s.
[2025-07-15 21:30:03,237:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

     								"publication_year": "2024"
}

    		 							 	 			

[2025-07-15 21:30:03,534:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:03,534:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:30:03,534:     INFO:        llm_utils.py:113 -            llm_query()] context is: 5 6 0 9 9 0 0 1 3 2 0 2 4 4 3 7 5 C W C C / 9 0 1 1 0 1 : I
.
.
.
O D | E E E I
3 2 0 2 © 0 0 1 3 $ / 3 2 / 5 - 6 8 2 3 - 3 0 5 3 - 8 - 9 7 9 | ) C W C C ( e c n e r e f n o C d n a p o h s k r o W n o i t a c i n u m m o C d n a g n i t u p m o C
.
l
a u n n A h t 3 1 E E E I
3 2 0 2
Active Learning Framework For Long-term Network Traffic Classification
Jaroslav Peˇsek CTU in Prague Thakurova 9, Prague, Czech Republic jaroslav.pesek@fit.cvut.cz
Dominik Soukup CTU in Prague Thakurova 9, Prague, Czech Republic soukudom@fit.cvut.cz
Tom´aˇs ˇCejka CESNET Zikova 4 Prague, Czech Republic cejkat@cesnet.cz
Abstract—Recent network traffic classification methods benefit from machine learning (ML) technology. However, there are many challenges due to the use of ML, such as lack of high-quality annotated datasets, data drifts and other effects causing aging of datasets and ML models, high volumes of network traffic, etc. This paper presents the benefits of augmenting traditional workflows of ML training&deployment and adaption of the Active Learning (AL) concept on network traffic analysis. The paper proposes a novel Active Learning Framework (ALF) to address this topic. ALF provides prepared software components that can be used to deploy an AL loop and maintain an ALF instance that continuously evolves a dataset and ML model automatically. Moreover, ALF includes monitoring, datasets quality evaluation, and optimization capabilities that enhance the current state of the art in the AL domain. The resulting solution is deployable for IP flow-based analysis of high-speed (100Gb/s) networks, where it was evaluated for more than eight months. Additional use cases were evaluated on publicly available datasets.
by Brabec et al. in [3], and we can argue that ML models and datasets are becoming obsolete in time [4]. Also, deployment in a different network can cause a performance decrease. As a result, even a perfectly annotated dataset with good performance will drop in accuracy due to

[2025-07-15 21:30:03,534:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
5 6 0 9 9 0 0 1 3 2 0 2 4 4 3 7 5 C W C C / 9 0 1 1 0 1 : I
.
.
.
O D | E E E I
3 2 0 2 © 0 0 1 3 $ / 3 2 / 5 - 6 8 2 3 - 3 0 5 3 - 8 - 9 7 9 | ) C W C C ( e c n e r e f n o C d n a p o h s k r o W n o i t a c i n u m m o C d n a g n i t u p m o C
.
l
a u n n A h t 3 1 E E E I
3 2 0 2
Active Learning Framework For Long-term Network Traffic Classification
Jaroslav Peˇsek CTU in Prague Thakurova 9, Prague, Czech Republic jaroslav.pesek@fit.cvut.cz
Dominik Soukup CTU in Prague Thakurova 9, Prague, Czech Republic soukudom@fit.cvut.cz
Tom´aˇs ˇCejka CESNET Zikova 4 Prague, Czech Republic cejkat@cesnet.cz
Abstract—Recent network traffic classification methods benefit from machine learning (ML) technology. However, there are many challenges due to the use of ML, such as lack of high-quality annotated datasets, data drifts and other effects causing aging of datasets and ML models, high volumes of network traffic, etc. This paper presents the benefits of augmenting traditional workflows of ML training&deployment and adaption of the Active Learning (AL) concept on network traffic analysis. The paper proposes a novel Active Learning Framework (ALF) to address this topic. ALF provides prepared software components that can be used to deploy an AL loop and maintain an ALF instance that continuously evolves a dataset and ML model automatically. Moreover, ALF includes monitoring, datasets quality evaluation, and optimization capabilities that enhance the current state of the art in the AL domain. The resulting solution is deployable for IP flow-based analysis of high-speed (100Gb/s) networks, where it was evaluated for more than eight months. Additional use cases were evaluated on publicly available datasets.
by Brabec et al. in [3], and we can argue that ML models and datasets are becoming obsolete in time [4]. Also, deployment in a different network can cause a performance decrease. As a result, even a perfectly annotated dataset with good performance will drop in accuracy due to

[2025-07-15 21:30:06,158:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.62 s.
[2025-07-15 21:30:06,159:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "paper_title": "Active Learning Framework For Long-term Network Traffic Classification" }
     				   							 

[2025-07-15 21:30:06,161:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:06,161:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:30:06,161:     INFO:        llm_utils.py:113 -            llm_query()] context is: 5 6 0 9 9 0 0 1 3 2 0 2 4 4 3 7 5 C W C C / 9 0 1 1 0 1 : I
.
.
.
O D | E E E I
3 2 0 2 © 0 0 1 3 $ / 3 2 / 5 - 6 8 2 3 - 3 0 5 3 - 8 - 9 7 9 | ) C W C C ( e c n e r e f n o C d n a p o h s k r o W n o i t a c i n u m m o C d n a g n i t u p m o C
.
l
a u n n A h t 3 1 E E E I
3 2 0 2
Active Learning Framework For Long-term Network Traffic Classification
Jaroslav Peˇsek CTU in Prague Thakurova 9, Prague, Czech Republic jaroslav.pesek@fit.cvut.cz
Dominik Soukup CTU in Prague Thakurova 9, Prague, Czech Republic soukudom@fit.cvut.cz
Tom´aˇs ˇCejka CESNET Zikova 4 Prague, Czech Republic cejkat@cesnet.cz
Abstract—Recent network traffic classification methods benefit from machine learning (ML) technology. However, there are many challenges due to the use of ML, such as lack of high-quality annotated datasets, data drifts and other effects causing aging of datasets and ML models, high volumes of network traffic, etc. This paper presents the benefits of augmenting traditional workflows of ML training&deployment and adaption of the Active Learning (AL) concept on network traffic analysis. The paper proposes a novel Active Learning Framework (ALF) to address this topic. ALF provides prepared software components that can be used to deploy an AL loop and maintain an ALF instance that continuously evolves a dataset and ML model automatically. Moreover, ALF includes monitoring, datasets quality evaluation, and optimization capabilities that enhance the current state of the art in the AL domain. The resulting solution is deployable for IP flow-based analysis of high-speed (100Gb/s) networks, where it was evaluated for more than eight months. Additional use cases were evaluated on publicly available datasets.
by Brabec et al. in [3], and we can argue that ML models and datasets are becoming obsolete in time [4]. Also, deployment in a different network can cause a performance decrease. As a result, even a perfectly annotated dataset with good performance will drop in accuracy due to

[2025-07-15 21:30:06,161:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
5 6 0 9 9 0 0 1 3 2 0 2 4 4 3 7 5 C W C C / 9 0 1 1 0 1 : I
.
.
.
O D | E E E I
3 2 0 2 © 0 0 1 3 $ / 3 2 / 5 - 6 8 2 3 - 3 0 5 3 - 8 - 9 7 9 | ) C W C C ( e c n e r e f n o C d n a p o h s k r o W n o i t a c i n u m m o C d n a g n i t u p m o C
.
l
a u n n A h t 3 1 E E E I
3 2 0 2
Active Learning Framework For Long-term Network Traffic Classification
Jaroslav Peˇsek CTU in Prague Thakurova 9, Prague, Czech Republic jaroslav.pesek@fit.cvut.cz
Dominik Soukup CTU in Prague Thakurova 9, Prague, Czech Republic soukudom@fit.cvut.cz
Tom´aˇs ˇCejka CESNET Zikova 4 Prague, Czech Republic cejkat@cesnet.cz
Abstract—Recent network traffic classification methods benefit from machine learning (ML) technology. However, there are many challenges due to the use of ML, such as lack of high-quality annotated datasets, data drifts and other effects causing aging of datasets and ML models, high volumes of network traffic, etc. This paper presents the benefits of augmenting traditional workflows of ML training&deployment and adaption of the Active Learning (AL) concept on network traffic analysis. The paper proposes a novel Active Learning Framework (ALF) to address this topic. ALF provides prepared software components that can be used to deploy an AL loop and maintain an ALF instance that continuously evolves a dataset and ML model automatically. Moreover, ALF includes monitoring, datasets quality evaluation, and optimization capabilities that enhance the current state of the art in the AL domain. The resulting solution is deployable for IP flow-based analysis of high-speed (100Gb/s) networks, where it was evaluated for more than eight months. Additional use cases were evaluated on publicly available datasets.
by Brabec et al. in [3], and we can argue that ML models and datasets are becoming obsolete in time [4]. Also, deployment in a different network can cause a performance decrease. As a result, even a perfectly annotated dataset with good performance will drop in accuracy due to

[2025-07-15 21:30:08,530:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.37 s.
[2025-07-15 21:30:08,531:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {"publication_year": "..."}
    					  				    	

[2025-07-15 21:30:08,852:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:08,852:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:30:08,852:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2023 19th International Conference on Network and Service Management (CNSM)
Network Traffic Classification based on Single Flow Time Series Analysis
Josef Koumar1,2, Karel Hynek1, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, hynekkar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: koumajos@fit.cvut.cz
Abstract—Network traffic monitoring using IP flows is used to handle the current challenge of analyzing encrypted network communication. Nevertheless, the packet aggregation into flow records naturally causes information loss; therefore, this paper proposes a novel flow extension for traffic features based on the time series analysis of the Single Flow Time series, i.e., a time series created by the number of bytes in each packet and its timestamp. We propose 69 universal features based on the statistical analysis of data points, time domain analysis, packet distribution within the flow timespan, time series behavior, and frequency domain analysis. We have demonstrated the usabil- ity and universality of the proposed feature vector for various network traffic classification tasks using 15 well-known publicly available datasets. Our evaluation shows that the novel feature vector achieves classification performance similar or better than related works on both binary and multiclass classification tasks. In more than half of the evaluated tasks, the classification per- formance increased by up to 5 %.
Index Terms—time series, unevenly spaced time series, time series analysis, classification, lomb-scargle periodogram, spectral analysis, network traffic, machine learning
I. INTRODUCTION
representation of the traffic is universal enough to get a high- level overview of large networks with high volumes of traffic and even encrypted traffic.
Since flows contain mainly information from packet headers and do not extract the payload, they are not affected by the payload encryption and are the ideal candidate for encryp

[2025-07-15 21:30:08,852:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
2023 19th International Conference on Network and Service Management (CNSM)
Network Traffic Classification based on Single Flow Time Series Analysis
Josef Koumar1,2, Karel Hynek1, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, hynekkar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: koumajos@fit.cvut.cz
Abstract—Network traffic monitoring using IP flows is used to handle the current challenge of analyzing encrypted network communication. Nevertheless, the packet aggregation into flow records naturally causes information loss; therefore, this paper proposes a novel flow extension for traffic features based on the time series analysis of the Single Flow Time series, i.e., a time series created by the number of bytes in each packet and its timestamp. We propose 69 universal features based on the statistical analysis of data points, time domain analysis, packet distribution within the flow timespan, time series behavior, and frequency domain analysis. We have demonstrated the usabil- ity and universality of the proposed feature vector for various network traffic classification tasks using 15 well-known publicly available datasets. Our evaluation shows that the novel feature vector achieves classification performance similar or better than related works on both binary and multiclass classification tasks. In more than half of the evaluated tasks, the classification per- formance increased by up to 5 %.
Index Terms—time series, unevenly spaced time series, time series analysis, classification, lomb-scargle periodogram, spectral analysis, network traffic, machine learning
I. INTRODUCTION
representation of the traffic is universal enough to get a high- level overview of large networks with high volumes of traffic and even encrypted traffic.
Since flows contain mainly information from packet headers and do not extract the payload, they are not affected by the payload encryption and are the ideal candidate for encryp

[2025-07-15 21:30:11,418:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.57 s.
[2025-07-15 21:30:11,418:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

     										"paper_title": "Network Traffic Classification based on Single Flow Time Series Analysis"
    }

    	 						 	 	 	 	

[2025-07-15 21:30:11,420:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:11,420:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:30:11,420:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2023 19th International Conference on Network and Service Management (CNSM)
Network Traffic Classification based on Single Flow Time Series Analysis
Josef Koumar1,2, Karel Hynek1, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, hynekkar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: koumajos@fit.cvut.cz
Abstract—Network traffic monitoring using IP flows is used to handle the current challenge of analyzing encrypted network communication. Nevertheless, the packet aggregation into flow records naturally causes information loss; therefore, this paper proposes a novel flow extension for traffic features based on the time series analysis of the Single Flow Time series, i.e., a time series created by the number of bytes in each packet and its timestamp. We propose 69 universal features based on the statistical analysis of data points, time domain analysis, packet distribution within the flow timespan, time series behavior, and frequency domain analysis. We have demonstrated the usabil- ity and universality of the proposed feature vector for various network traffic classification tasks using 15 well-known publicly available datasets. Our evaluation shows that the novel feature vector achieves classification performance similar or better than related works on both binary and multiclass classification tasks. In more than half of the evaluated tasks, the classification per- formance increased by up to 5 %.
Index Terms—time series, unevenly spaced time series, time series analysis, classification, lomb-scargle periodogram, spectral analysis, network traffic, machine learning
I. INTRODUCTION
representation of the traffic is universal enough to get a high- level overview of large networks with high volumes of traffic and even encrypted traffic.
Since flows contain mainly information from packet headers and do not extract the payload, they are not affected by the payload encryption and are the ideal candidate for encryp

[2025-07-15 21:30:11,420:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
2023 19th International Conference on Network and Service Management (CNSM)
Network Traffic Classification based on Single Flow Time Series Analysis
Josef Koumar1,2, Karel Hynek1, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, hynekkar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: koumajos@fit.cvut.cz
Abstract—Network traffic monitoring using IP flows is used to handle the current challenge of analyzing encrypted network communication. Nevertheless, the packet aggregation into flow records naturally causes information loss; therefore, this paper proposes a novel flow extension for traffic features based on the time series analysis of the Single Flow Time series, i.e., a time series created by the number of bytes in each packet and its timestamp. We propose 69 universal features based on the statistical analysis of data points, time domain analysis, packet distribution within the flow timespan, time series behavior, and frequency domain analysis. We have demonstrated the usabil- ity and universality of the proposed feature vector for various network traffic classification tasks using 15 well-known publicly available datasets. Our evaluation shows that the novel feature vector achieves classification performance similar or better than related works on both binary and multiclass classification tasks. In more than half of the evaluated tasks, the classification per- formance increased by up to 5 %.
Index Terms—time series, unevenly spaced time series, time series analysis, classification, lomb-scargle periodogram, spectral analysis, network traffic, machine learning
I. INTRODUCTION
representation of the traffic is universal enough to get a high- level overview of large networks with high volumes of traffic and even encrypted traffic.
Since flows contain mainly information from packet headers and do not extract the payload, they are not affected by the payload encryption and are the ideal candidate for encryp

[2025-07-15 21:30:13,717:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.30 s.
[2025-07-15 21:30:13,717:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

     	"publication_year": "--extract--"
}

    	 								     	

[2025-07-15 21:30:13,725:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:30:13,725:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited the paper of your interest.
    The paper of interest describes a dataset of network data flow.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    The goal is to find out if the dataset was used by the authors of the paper, or whether it was only referenced.
    If the dataset was actually used, you can also figure out for what application it was used, but only if the paper mentions it explicitly.
    If the paper mentions f1-score or other classification metrics achieved using the dataset of interest, include it in the response.
    Answer should be only one phrase long.
    Aswer must only contain short structured response exactly as provided in following examples including brackets.
    Answer should look like this: [used, application: machine learning]
    Another example: [used, application: unknown]
    Another example: [cited]"
    

[2025-07-15 21:30:13,725:     INFO:        llm_utils.py:113 -            llm_query()] context is: lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:13,725:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited the paper of your interest.
    The paper of interest describes a dataset of network data flow.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    The goal is to find out if the dataset was used by the authors of the paper, or whether it was only referenced.
    If the dataset was actually used, you can also figure out for what application it was used, but only if the paper mentions it explicitly.
    If the paper mentions f1-score or other classification metrics achieved using the dataset of interest, include it in the response.
    Answer should be only one phrase long.
    Aswer must only contain short structured response exactly as provided in following examples including brackets.
    Answer should look like this: [used, application: machine learning]
    Another example: [used, application: unknown]
    Another example: [cited]"
    

    Respond in a JSON format as provided.

    ### Text:
    
lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:19,302:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 5.58 s.
[2025-07-15 21:30:19,304:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "dataset_application": "feature selection, network traffic analysis, performance evaluation of novel classifier methods"}
          	 					 	 

[2025-07-15 21:30:19,306:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:30:19,306:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find the key observations from our dataset.
    List only observations that are explicitly written in the paper.
    If you think there are no observations from our dataset mentioned or if you are not sure, reply just "no key observations found".
    List only observations regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

[2025-07-15 21:30:19,307:     INFO:        llm_utils.py:113 -            llm_query()] context is: lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:19,307:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find the key observations from our dataset.
    List only observations that are explicitly written in the paper.
    If you think there are no observations from our dataset mentioned or if you are not sure, reply just "no key observations found".
    List only observations regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

    Respond in a JSON format as provided.

    ### Text:
    
lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:26,188:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 6.88 s.
[2025-07-15 21:30:26,189:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "key_observations": "The paper presents baseline classifiers for various network classification tasks including Binary and Multiclass classification accuracy and F1-score metrics for multiple datasets such as CESNET-MINER22, CTU-13, and CIC-Bell-DNS. The performance of these classifiers is evaluated across different methods and hyperparameters, with detailed metrics provided for each dataset." }

  		                

[2025-07-15 21:30:26,191:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:30:26,191:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find any issues in our dataset.
    List only issues that are explicitly written in the paper.
    If you think there are no issues with our dataset mentioned or if you are not sure, reply just "no issues found".
    Also, list only issues regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

[2025-07-15 21:30:26,191:     INFO:        llm_utils.py:113 -            llm_query()] context is: lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:26,191:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find any issues in our dataset.
    List only issues that are explicitly written in the paper.
    If you think there are no issues with our dataset mentioned or if you are not sure, reply just "no issues found".
    Also, list only issues regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

    Respond in a JSON format as provided.

    ### Text:
    
lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:32,442:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 6.25 s.
[2025-07-15 21:30:32,443:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "known_issues": "1) The paper describes only binary classification metrics; no multiclass classification metrics are present. 2) For multiclass classification metrics from other sources, the confidence intervals or variance is not provided."
 }

    					  					  		

[2025-07-15 21:30:32,446:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:30:32,446:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to evaluate sentiment in which paper talks about our dataset.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Answer can contain only the sentiment rating (number from -5 to 5, -5 is very negative, 0 is neutral, 5 is very positive).
    ### Example:
    1
    ### Example:
    -4
    

[2025-07-15 21:30:32,446:     INFO:        llm_utils.py:113 -            llm_query()] context is: lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:32,446:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to evaluate sentiment in which paper talks about our dataset.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Answer can contain only the sentiment rating (number from -5 to 5, -5 is very negative, 0 is neutral, 5 is very positive).
    ### Example:
    1
    ### Example:
    -4
    

    Respond in a JSON format as provided.

    ### Text:
    
lware detection, 4) DNS over HTTPS detection, 5) DoS attack detection, 6) HTTPS Bruteforce detection, 7) Intru- sion detection/classification, 8) IoT malware classification, 9) TOR detection/classification and 10) VPN traffic detec- tion/classification.
lowest frequency in the power spectrum.
Spectral skewness is the measure of peakedness or flatness
of power spectrum.
In order to evaluate the performance of the novel features, we needed to create the baseline—a best-performing classifier for each concerned dataset. We searched for recent classifier
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:16:32 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
TABLE II SUMMARIZED BEST-RELATED WORKS FOR CLASSIFICATION. IF THE “–” APPEARS, THEN THE RELATED WORKS DO NOT PRESENT THE METRICS, OR THE DATASET IS NOT DESIGNED FOR MULTICLASS CLASSIFICATION.
Detection problem CTU-13 [34] CESNET-MINER22 [35] CIC-Bell-DNS [20] CIC-DoHBrw-2020 [8] DoH-Real-world [17] HTTPS Brute-force [37] Bot-IoT [38] Edge-IIoTset [40] IoT-23 [42] TON IoT [44] CIC-IDS-2017 [21] UNSW-NB15 [47] ISCX-Tor-2016 [13] ISCX-VPN-2016 [50] VNAT [53]
Binary classification Accuracy 99.85 93.72 99.19 99.98 97.5 99.93 99.99 99.99 ∼ 96 99.29 98.5 92.39 99.89 93.75 Method
Stergiopoulos et al. Pln´y et al. [7] Kumaar et al. [36] Zebin et al. [19] Jeˇr´abek et al. [9] Luxemburk et al. [10] Shafiq et al. [39] Khacha et al. [41] Sahu et al. [43] Dai et al. [45] Agrafiotis [22] Ding et al. [23] Sarkar et al. [48] Aceto et al. [51] Jorgensen et al.
[4]
[53]
F1-score 99.90 90.59 99.20 99.91 98.7 96.26 99.99 99.99 ∼ 96 99.03 95.4 94.39 99.88 91.95 98.00
Method Mar´ın et al. [5]
Khacha et al. [41]
Tareq et al. Kunang et al. Ding et al. Yang et al. Dener et al. Jorgensen et al.
[46]
[23] [49] [52]
Multiclass classification
Average macro – – – – – Accuracy 99.72
weighted
98.69
[53]
weighted weighted macro weighted macro micro
98.5 95.79 90.39 96.04 89.29 96
F1-score 76.04
98.57 95.11 79.64 95.97 87.83 96
proposals (published after 2017) using public research paper databases such as Google Scholar, IEEE Explore, and ACM Digital Library. We went through more than 300 papers and selected the best-performing proposals that met the follow- ing conditions ensuring fair comparability: 1) it was a flow- based method, 2) it uses the dataset as a whole and clas- sifies all the dataset classes and types of samples, 3) does not use IP addresses as input features7, 4) does not combine the concerned dataset with additional data. The selected best- performing proposals for both binary or multiclass versions of the classification tasks for each dataset are written in Table II.
to tune the following hyperparameters: n_estimators, max_depth, gamma, reg_alpha, min_child_weight, and colsample_bytree.
The hyperparameter search was performed using the training and validation datasets. The best values of the hyperparameters were selected based on the F1-score measure on the validation dataset. The final performance of the classifier on each dataset was obtained from the model trained using the trained part and evaluated on the test part. The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before.
VI. FEATURE EVALUATION
A. Results
We evaluated the features by creating a novel classifier for each concerned network classification task. The classifier creation pipeline is the set of steps that creates the best final model. At first, the published datasets were split among Train, Validation, and Test sets in a ratio of 60:20:20 while keeping the labeling ratio like in the original datasets. Furthermore, some additional value sanitation is recommended, e.g., for a very short time series, it is required to handle “NaN” values: we replace NaN for the distribution features with 0.5, for the frequency features with -1, and




[2025-07-15 21:30:37,310:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 4.86 s.
[2025-07-15 21:30:37,311:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "sentiment": -4 }
       									  		

[2025-07-15 21:30:37,629:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:37,629:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:30:37,629:     INFO:        llm_utils.py:113 -            llm_query()] context is: Augmenting Monitoring Infrastructure For Dynamic Software-Defined Networks
Jaroslav Pesek1,2, Richard Plny1, Josef Koumar1, Kamil Jerabek3, and Tomas Cejka2
1Czech Technical University in Prague, Prague, Czech Republic
Email:
{
jaroslav.pesek, plnyrich, koumajos } 2CESNET, a.l.e., Prague, Czech Republic Email: cejkat@cesnet.cz
@fit.cvut.cz
3FIT BUT, Brno, Czech Republic Email: ijerabek@fit.vutbr.cz
Abstract—Software-Defined Networking (SDN) and virtual environment raise new challenges for network monitoring tools. The dynamic and flexible nature of these network technologies requires adaptation of monitoring infrastructure to overcome challenges of analysis and interpretability of the monitored network traffic. This paper describes a concept of automatic on-demand deployment of monitoring probes and correlation of network data with infrastructure state and configuration in time. Such an approach to monitoring SDN & virtual networks is usable in several use cases, such as IoT networks and anomaly de- tection. It increases visibility into complex and dynamic networks. Additionally, it can help with the creation of well-annotated datasets that are essential for any further research.
Index Terms—Network Monitoring, Software-Defined Net2) virtual network switches and virtual network infrastruc- tures can be created on the fly, and they can carry local traffic that is not visible at the perimeter (which is traditionally equipped with monitoring probes); 3) traditional way of monitoring system deployment is rather static and, usually, no additional monitoring probes are inserted into the running network;
4) based on the previous points, it is challenging to work with the collected data from the monitoring system with- out any additional information about the configuration and status of the virtual network in the particular time window.
works, Internet of Things, Network Security
I. INTRODUCTION
Network traffic monitoring has undergone a long evolution, and the technology t

[2025-07-15 21:30:37,629:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
Augmenting Monitoring Infrastructure For Dynamic Software-Defined Networks
Jaroslav Pesek1,2, Richard Plny1, Josef Koumar1, Kamil Jerabek3, and Tomas Cejka2
1Czech Technical University in Prague, Prague, Czech Republic
Email:
{
jaroslav.pesek, plnyrich, koumajos } 2CESNET, a.l.e., Prague, Czech Republic Email: cejkat@cesnet.cz
@fit.cvut.cz
3FIT BUT, Brno, Czech Republic Email: ijerabek@fit.vutbr.cz
Abstract—Software-Defined Networking (SDN) and virtual environment raise new challenges for network monitoring tools. The dynamic and flexible nature of these network technologies requires adaptation of monitoring infrastructure to overcome challenges of analysis and interpretability of the monitored network traffic. This paper describes a concept of automatic on-demand deployment of monitoring probes and correlation of network data with infrastructure state and configuration in time. Such an approach to monitoring SDN & virtual networks is usable in several use cases, such as IoT networks and anomaly de- tection. It increases visibility into complex and dynamic networks. Additionally, it can help with the creation of well-annotated datasets that are essential for any further research.
Index Terms—Network Monitoring, Software-Defined Net2) virtual network switches and virtual network infrastruc- tures can be created on the fly, and they can carry local traffic that is not visible at the perimeter (which is traditionally equipped with monitoring probes); 3) traditional way of monitoring system deployment is rather static and, usually, no additional monitoring probes are inserted into the running network;
4) based on the previous points, it is challenging to work with the collected data from the monitoring system with- out any additional information about the configuration and status of the virtual network in the particular time window.
works, Internet of Things, Network Security
I. INTRODUCTION
Network traffic monitoring has undergone a long evolution, and the technology t

[2025-07-15 21:30:40,213:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.58 s.
[2025-07-15 21:30:40,214:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

    	"paper_title": "Augmenting Monitoring Infrastructure For Dynamic Software-Defined Networks"
}

    	 	 					 						

[2025-07-15 21:30:40,216:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:40,217:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:30:40,217:     INFO:        llm_utils.py:113 -            llm_query()] context is: Augmenting Monitoring Infrastructure For Dynamic Software-Defined Networks
Jaroslav Pesek1,2, Richard Plny1, Josef Koumar1, Kamil Jerabek3, and Tomas Cejka2
1Czech Technical University in Prague, Prague, Czech Republic
Email:
{
jaroslav.pesek, plnyrich, koumajos } 2CESNET, a.l.e., Prague, Czech Republic Email: cejkat@cesnet.cz
@fit.cvut.cz
3FIT BUT, Brno, Czech Republic Email: ijerabek@fit.vutbr.cz
Abstract—Software-Defined Networking (SDN) and virtual environment raise new challenges for network monitoring tools. The dynamic and flexible nature of these network technologies requires adaptation of monitoring infrastructure to overcome challenges of analysis and interpretability of the monitored network traffic. This paper describes a concept of automatic on-demand deployment of monitoring probes and correlation of network data with infrastructure state and configuration in time. Such an approach to monitoring SDN & virtual networks is usable in several use cases, such as IoT networks and anomaly de- tection. It increases visibility into complex and dynamic networks. Additionally, it can help with the creation of well-annotated datasets that are essential for any further research.
Index Terms—Network Monitoring, Software-Defined Net2) virtual network switches and virtual network infrastruc- tures can be created on the fly, and they can carry local traffic that is not visible at the perimeter (which is traditionally equipped with monitoring probes); 3) traditional way of monitoring system deployment is rather static and, usually, no additional monitoring probes are inserted into the running network;
4) based on the previous points, it is challenging to work with the collected data from the monitoring system with- out any additional information about the configuration and status of the virtual network in the particular time window.
works, Internet of Things, Network Security
I. INTRODUCTION
Network traffic monitoring has undergone a long evolution, and the technology t

[2025-07-15 21:30:40,217:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
Augmenting Monitoring Infrastructure For Dynamic Software-Defined Networks
Jaroslav Pesek1,2, Richard Plny1, Josef Koumar1, Kamil Jerabek3, and Tomas Cejka2
1Czech Technical University in Prague, Prague, Czech Republic
Email:
{
jaroslav.pesek, plnyrich, koumajos } 2CESNET, a.l.e., Prague, Czech Republic Email: cejkat@cesnet.cz
@fit.cvut.cz
3FIT BUT, Brno, Czech Republic Email: ijerabek@fit.vutbr.cz
Abstract—Software-Defined Networking (SDN) and virtual environment raise new challenges for network monitoring tools. The dynamic and flexible nature of these network technologies requires adaptation of monitoring infrastructure to overcome challenges of analysis and interpretability of the monitored network traffic. This paper describes a concept of automatic on-demand deployment of monitoring probes and correlation of network data with infrastructure state and configuration in time. Such an approach to monitoring SDN & virtual networks is usable in several use cases, such as IoT networks and anomaly de- tection. It increases visibility into complex and dynamic networks. Additionally, it can help with the creation of well-annotated datasets that are essential for any further research.
Index Terms—Network Monitoring, Software-Defined Net2) virtual network switches and virtual network infrastruc- tures can be created on the fly, and they can carry local traffic that is not visible at the perimeter (which is traditionally equipped with monitoring probes); 3) traditional way of monitoring system deployment is rather static and, usually, no additional monitoring probes are inserted into the running network;
4) based on the previous points, it is challenging to work with the collected data from the monitoring system with- out any additional information about the configuration and status of the virtual network in the particular time window.
works, Internet of Things, Network Security
I. INTRODUCTION
Network traffic monitoring has undergone a long evolution, and the technology t

[2025-07-15 21:30:42,750:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.53 s.
[2025-07-15 21:30:42,750:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "publication_year": "}<think>Alright, so I'm trying to figure out the year the paper " }
   			 						 					 

[2025-07-15 21:30:43,246:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:43,246:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:30:43,246:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2023 19th International Conference on Network and Service Management (CNSM)
Enhancing DeCrypto: Finding Cryptocurrency Miners based on Periodic Behavior
Josef Koumar1,2, Richard Pln´y2, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: {koumajos, plnyrich}@fit.cvut.cz
Abstract—While the popularity of cryptocurrencies and the whole industry’s value are rising, the number of threat actors who use illegal “coin miner malware” is increasing as well. The threat actors commonly use computational resources of companies, research and educational institutions, or end users. In this paper, we analyzed the long-term periodic behavior of the cryptocurrency miners communicating in computer networks. We propose a novel method for cryptominers detection using specially designed periodicity features. The detection algorithm is based on the mathematical detection of periodic Flow time series (FTS) and feature mining. Altogether with the Machine Learning technique, the resulting system achieves high-precision performance. Furthermore, our approach enhances a flow-based cryptominers detection system DeCrypto to further improve its reliability and feasibility for high-speed networks.
Index Terms—cryptocurrencies, cryptocurrency miners, net- work traffic, network traffic analysis, periodicity, Lomb-Scargle periodogram, network traffic classification, Machine Learning
I. INTRODUCTION
Cryptocurrencies firstly occurred in 2008, when Satoshi Nakamoto published Bitcoin’s whitepaper [1]. Since then, many cryptocurrencies have been created. A decentralized sys- tem of money, where transactions are verified by individuals called miners and mutual trust is built on cryptography, quickly became very popular.
Many cryptocurrencies are based on Proof-of-Work (PoW) mechanisms, which consume a lot of electricity and processing power. Today, Proof-of-Stake (PoS) mechanisms, which do not require dem

[2025-07-15 21:30:43,246:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
2023 19th International Conference on Network and Service Management (CNSM)
Enhancing DeCrypto: Finding Cryptocurrency Miners based on Periodic Behavior
Josef Koumar1,2, Richard Pln´y2, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: {koumajos, plnyrich}@fit.cvut.cz
Abstract—While the popularity of cryptocurrencies and the whole industry’s value are rising, the number of threat actors who use illegal “coin miner malware” is increasing as well. The threat actors commonly use computational resources of companies, research and educational institutions, or end users. In this paper, we analyzed the long-term periodic behavior of the cryptocurrency miners communicating in computer networks. We propose a novel method for cryptominers detection using specially designed periodicity features. The detection algorithm is based on the mathematical detection of periodic Flow time series (FTS) and feature mining. Altogether with the Machine Learning technique, the resulting system achieves high-precision performance. Furthermore, our approach enhances a flow-based cryptominers detection system DeCrypto to further improve its reliability and feasibility for high-speed networks.
Index Terms—cryptocurrencies, cryptocurrency miners, net- work traffic, network traffic analysis, periodicity, Lomb-Scargle periodogram, network traffic classification, Machine Learning
I. INTRODUCTION
Cryptocurrencies firstly occurred in 2008, when Satoshi Nakamoto published Bitcoin’s whitepaper [1]. Since then, many cryptocurrencies have been created. A decentralized sys- tem of money, where transactions are verified by individuals called miners and mutual trust is built on cryptography, quickly became very popular.
Many cryptocurrencies are based on Proof-of-Work (PoW) mechanisms, which consume a lot of electricity and processing power. Today, Proof-of-Stake (PoS) mechanisms, which do not require dem

[2025-07-15 21:30:45,875:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.63 s.
[2025-07-15 21:30:45,876:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

     "paper_title": "Enhancing DeCrypto: Finding Cryptocurrency Miners based on Periodic Behavior"
}

    	 	 	 	 				 	  

[2025-07-15 21:30:45,878:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:30:45,878:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:30:45,878:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2023 19th International Conference on Network and Service Management (CNSM)
Enhancing DeCrypto: Finding Cryptocurrency Miners based on Periodic Behavior
Josef Koumar1,2, Richard Pln´y2, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: {koumajos, plnyrich}@fit.cvut.cz
Abstract—While the popularity of cryptocurrencies and the whole industry’s value are rising, the number of threat actors who use illegal “coin miner malware” is increasing as well. The threat actors commonly use computational resources of companies, research and educational institutions, or end users. In this paper, we analyzed the long-term periodic behavior of the cryptocurrency miners communicating in computer networks. We propose a novel method for cryptominers detection using specially designed periodicity features. The detection algorithm is based on the mathematical detection of periodic Flow time series (FTS) and feature mining. Altogether with the Machine Learning technique, the resulting system achieves high-precision performance. Furthermore, our approach enhances a flow-based cryptominers detection system DeCrypto to further improve its reliability and feasibility for high-speed networks.
Index Terms—cryptocurrencies, cryptocurrency miners, net- work traffic, network traffic analysis, periodicity, Lomb-Scargle periodogram, network traffic classification, Machine Learning
I. INTRODUCTION
Cryptocurrencies firstly occurred in 2008, when Satoshi Nakamoto published Bitcoin’s whitepaper [1]. Since then, many cryptocurrencies have been created. A decentralized sys- tem of money, where transactions are verified by individuals called miners and mutual trust is built on cryptography, quickly became very popular.
Many cryptocurrencies are based on Proof-of-Work (PoW) mechanisms, which consume a lot of electricity and processing power. Today, Proof-of-Stake (PoS) mechanisms, which do not require dem

[2025-07-15 21:30:45,878:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
2023 19th International Conference on Network and Service Management (CNSM)
Enhancing DeCrypto: Finding Cryptocurrency Miners based on Periodic Behavior
Josef Koumar1,2, Richard Pln´y2, and Tom´aˇs ˇCejka1
1CESNET, a.l.e., Prague, Czech republic Email: {koumar, cejkat}@cesnet.cz 2Czech Technical University in Prague, Czech republic Email: {koumajos, plnyrich}@fit.cvut.cz
Abstract—While the popularity of cryptocurrencies and the whole industry’s value are rising, the number of threat actors who use illegal “coin miner malware” is increasing as well. The threat actors commonly use computational resources of companies, research and educational institutions, or end users. In this paper, we analyzed the long-term periodic behavior of the cryptocurrency miners communicating in computer networks. We propose a novel method for cryptominers detection using specially designed periodicity features. The detection algorithm is based on the mathematical detection of periodic Flow time series (FTS) and feature mining. Altogether with the Machine Learning technique, the resulting system achieves high-precision performance. Furthermore, our approach enhances a flow-based cryptominers detection system DeCrypto to further improve its reliability and feasibility for high-speed networks.
Index Terms—cryptocurrencies, cryptocurrency miners, net- work traffic, network traffic analysis, periodicity, Lomb-Scargle periodogram, network traffic classification, Machine Learning
I. INTRODUCTION
Cryptocurrencies firstly occurred in 2008, when Satoshi Nakamoto published Bitcoin’s whitepaper [1]. Since then, many cryptocurrencies have been created. A decentralized sys- tem of money, where transactions are verified by individuals called miners and mutual trust is built on cryptography, quickly became very popular.
Many cryptocurrencies are based on Proof-of-Work (PoW) mechanisms, which consume a lot of electricity and processing power. Today, Proof-of-Stake (PoS) mechanisms, which do not require dem

[2025-07-15 21:30:47,879:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.00 s.
[2025-07-15 21:30:47,879:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {"publication_year": ""}

     		 	    				 	 

[2025-07-15 21:30:47,886:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:30:47,886:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited the paper of your interest.
    The paper of interest describes a dataset of network data flow.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    The goal is to find out if the dataset was used by the authors of the paper, or whether it was only referenced.
    If the dataset was actually used, you can also figure out for what application it was used, but only if the paper mentions it explicitly.
    If the paper mentions f1-score or other classification metrics achieved using the dataset of interest, include it in the response.
    Answer should be only one phrase long.
    Aswer must only contain short structured response exactly as provided in following examples including brackets.
    Answer should look like this: [used, application: machine learning]
    Another example: [used, application: unknown]
    Another example: [cited]"
    

[2025-07-15 21:30:47,886:     INFO:        llm_utils.py:113 -            llm_query()] context is: Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:30:47,886:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited the paper of your interest.
    The paper of interest describes a dataset of network data flow.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    The goal is to find out if the dataset was used by the authors of the paper, or whether it was only referenced.
    If the dataset was actually used, you can also figure out for what application it was used, but only if the paper mentions it explicitly.
    If the paper mentions f1-score or other classification metrics achieved using the dataset of interest, include it in the response.
    Answer should be only one phrase long.
    Aswer must only contain short structured response exactly as provided in following examples including brackets.
    Answer should look like this: [used, application: machine learning]
    Another example: [used, application: unknown]
    Another example: [cited]"
    

    Respond in a JSON format as provided.

    ### Text:
    
Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:04,732:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 16.85 s.
[2025-07-15 21:31:04,734:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

"dataset_application": "network traffic monitoring for cryptocurrency mining detection and mitigation of denial-of-service attacks in financial systems by leveraging machine learning techniques such as XGBoost, LightGBM, and CatBoost algorithms. The system monitors network flows to detect anomalies indicative of cryptocurrency mining activities and employs automated defense mechanisms based on real-time analysis of periodic features extracted from the time series data of these flows."
}

  							 						 			

[2025-07-15 21:31:04,737:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:31:04,737:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find the key observations from our dataset.
    List only observations that are explicitly written in the paper.
    If you think there are no observations from our dataset mentioned or if you are not sure, reply just "no key observations found".
    List only observations regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

[2025-07-15 21:31:04,737:     INFO:        llm_utils.py:113 -            llm_query()] context is: Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:04,737:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find the key observations from our dataset.
    List only observations that are explicitly written in the paper.
    If you think there are no observations from our dataset mentioned or if you are not sure, reply just "no key observations found".
    List only observations regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

    Respond in a JSON format as provided.

    ### Text:
    
Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:23,475:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 18.74 s.
[2025-07-15 21:31:23,477:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

"key_observations": "The key observations from the provided text are focused on the research involving the Cesnet-Miner22 dataset and its application in detecting periodic behaviors within network flows, specifically targeting cryptocurrency miners. The study employs machine learning algorithms to classify these periodic flows accurately, achieving high precision metrics such as accuracy, recall, and F1-score across various time intervals. The classification is part of an enhanced version of the DeCrypto system designed for real-time detection without false positives. The text also mentions experiments with different configurations of the ML models, including hyperparameter tuning using Hyperopt, and the deployment considerations for high-performance network infrastructure."
}

  	 							  	 					

[2025-07-15 21:31:23,480:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:31:23,480:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find any issues in our dataset.
    List only issues that are explicitly written in the paper.
    If you think there are no issues with our dataset mentioned or if you are not sure, reply just "no issues found".
    Also, list only issues regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

[2025-07-15 21:31:23,480:     INFO:        llm_utils.py:113 -            llm_query()] context is: Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:23,480:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find any issues in our dataset.
    List only issues that are explicitly written in the paper.
    If you think there are no issues with our dataset mentioned or if you are not sure, reply just "no issues found".
    Also, list only issues regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Reply in 5 or less single line points.
    

    Respond in a JSON format as provided.

    ### Text:
    
Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:37,110:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 13.63 s.
[2025-07-15 21:31:37,112:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {

"known_issues": "The system is not functioning as expected."
}

  																		

[2025-07-15 21:31:37,114:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:31:37,114:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to evaluate sentiment in which paper talks about our dataset.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Answer can contain only the sentiment rating (number from -5 to 5, -5 is very negative, 0 is neutral, 5 is very positive).
    ### Example:
    1
    ### Example:
    -4
    

[2025-07-15 21:31:37,114:     INFO:        llm_utils.py:113 -            llm_query()] context is: Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:37,114:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to evaluate sentiment in which paper talks about our dataset.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [7].
    Answer can contain only the sentiment rating (number from -5 to 5, -5 is very negative, 0 is neutral, 5 is very positive).
    ### Example:
    1
    ### Example:
    -4
    

    Respond in a JSON format as provided.

    ### Text:
    
Traffic Analysis and also by the Grant Agency of the CTU in Prague, grant No. SGS23/207/OHK3/3T/18 funded by the MEYS of the Czech Republic.
1https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/ 2https://www.forbes.com/advisor/investing/cryptocurrency/proof-of-work/ 3https://developer.bitcoin.org/devguide/mining.html 4https://learn-cloudsecurity.cisco.com/umbrella-library/ 2021-cyber-security-threat-trends-phishing-crypto-top-the-list
– We create a novel network traffic analysis approach for the detection of periodic behavior based on FTS, resulting in 43 input features for ML
– We present experiments with different lengths of FTS for the purpose of finding the best settings for deployment into high-speed ISP-level networks
– Our approach can be used as an extension of the De- Crypto system [7] and improve its accuracy by 2.95%, recall by 7.74%, and F1-score by 4.37% enhancing its overall reliability
– We created datasets of FTS and periodic behavior features based on the CESNET-MINER22 datasets [8], which we
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
978-3-903176-59-1 ©2023 IFIP
2023 19th International Conference on Network and Service Management (CNSM)
made publicly available on Zenodo [9].
This paper is organized as follows: Section II summarizes the related works. Section III describes the periodic behavior of mining activity. Section IV provides information about time series analysis concepts and describes a novel detection ap- proach to periodic cryptocurrency mining behavior. Section V provides a complete description of features used for detection. Section VI describes the entire classification pipeline and its results. Section VII describes the cooperation with the DeCrypto system and shows the achieved improvement of the system. Section VIII concludes this paper.
II. RELATED WORKS
Basic principle for network detection are block-lists, for example [10] for cryptomining. However, each domain or IP address can host multiple services, making block-list- based detection unreliable [11], [12]. Moreover, block-lists can never be complete and suffer from a high false-positive rate. Therefore, multiple studies have proposed mining detection using various other approaches.
Our work enhances the DeCrypto system and provides another data source to further minimize false positives and support high accuracy and precision. The proposed classifier aims to detect the periodic behavior of cryptominers by utilizing FTS analysis.
III. PERIODICITY BEHAVIOR OF CRYPTOCURRENCY MINERS
Functionality of cryptomining software is pretty straight- forward. Firstly, a miner connects to a mining pool or a crypto network to fetch an unverified block. Then, the miner starts generating hashes of header of this block together with a nonce (number used only once). When the miner finds a hash string that starts with a certain number of leading zeros (difficulty), the hash is considered correct and verified, and the completed block is broadcasted back to the mining pool or crypto network. The whole process starts again — the miner is fetching a new unverified block. Furthermore, the miner can receive a notification that the currently processed block was already verified by someone else. Miner then has to fetch a new block.
Swedan et al. [13] proposed Mining Detection and Pre- vention System (MDPS). Their system uses URL block lists, Man-In-The-Middle proxy, and Deep Packet Inspection (DPI). Decrypted payloads are inspected by mining code detectors and VirusTotal5 is used for detection of malicious JavaScript libraries. Unfortunately, it is impossible to use MITM proxies and DPI on high-speed ISP-level networks due to technical difficulties. Moreover, concerns about users’ privacy may rise. ˇZ´adn´ık et al. [14] proposed a detection solution that uses flow-based features and ML for primary cryptominers identifi- cation and active probing as a 


ll satisfy the network’s difficulty as well. Therefore, communication will occur more often. However, it is enough for periodicity detection.
IV. PERIODICITY DETECTION
We need the FTS with minimal noise for periodic behavior detection. Every FTS has to contain flows from the one process only; for example, YouTube video streaming, web- page loading, Keep-Alive communication or cryptomining communication. Because of this, we create FTS by sampling with Network dependencies [6]. A network dependency is a relationship between two IP addresses where one provides a service to the other. Furthermore, each network dependency has an ID created as ip_addr:port-ip_addr, where the port is well-known or registered and represents the service. Furthermore, some processes, like cryptocurrency miners, use non-registered ports. For such cases, it is necessary to use time series as ip_addr:port-ip_addr:port and apply detection of such ports in post-processing of FTS collection. For cryptominers from the CESNET-MINER22 dataset [8], such ports are 12433, 14433, 14444, and 20535.
Compared to related works, DeCrypto is the only system which was deployed and evaluated on such large network.
The network dependencies were evaluated as the best choice for sampling [6], causing minimal noise and occurring with
5https://virustotal.com 6Server Name Indication of the TLS protocol
7https://thebitcoinmanual.com/articles/btc-block-time/
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
the best result of periodic behavior detection. For example, the sample only by relationship between two IP addresses ended significantly worse because multiple processes can share one public IP address.
z = max(PLS) ∗ Significance level
The probability that z is bigger then rest of periodogram
In the FTS collection, we experimented with multiple time windows to evaluate deployment properties into real-time networks, for example, into ISP network CESNET2 side-by- side the DeCrypto system. We set the time windows, i.e., FTS length, from 10 minutes to 24 hours.
Because the FTS are Unevenly Sampled Time Series (USTS), we use the Lomb-Scargle periodogram [16]–[18], PLS, as a source of information for deciding whether the FTS contains periodic behavior.
The method for detection of periodic behavior is based on our previous work [4]. However, it is not feasible for high- speed ISP networks because it can process only a small num- ber of time series per second, and thus optimizations would be required. A novel and faster periodicity detection pipeline presented in Fig. 1 is designed for high-speed networks. This pipeline is able to process the whole CESNET-MINER22 dataset (containing 3 million flows obtained during 3 months) in 5 seconds with proper precision based on two threshold values of Scargle’s Significance Test (SST) [19].
powers PLS is computed by the equation:
P [PLS > z] = 1 − e
− z σ2
PLS
If P [PLS > z] is larger or equal to threshold value Per- centage level, then the time series contains periodic behavior. In this work, we evaluate the classification results based on the settings of threshold values Significance level and Percentage level. Furthermore, the smaller Significance level is, the more strict is the periodic detection. Moreover, the bigger Percentage level is, the more strict is periodic detection. the same datapoint occurs periodically, periodic detection by LS peri- odogram and SST can fail. So, we test if FTS is constant and, in such case it is taken as periodic. Moreover, the periodic behavior detection pipeline can cause false positives for short FTS. Thus, we run the pipeline only for the FTS with at least ten datapoints.
Furthermore, for FTS that are constant,
i.e.,
V. FEATURE MINING
Feature Mining
Creating Time Series
End
Flow Time Series (FTS)LS periodogramno
yes
yes
Testing Constant 


th suffixes: ( x), and the upper value ( y). The list of these features contains: packet value x, packet value y, bytes value x, bytes value y, duration value y, difftimes value x, and difftimes value y.
the interval’s
duration value x,
Moreover, we add basic statistic properties (Mean, Standard deviation, Skewness, and Kurtosis) for each time series metric resulting in 16 features. The Skewness is computed as Sk =
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
(1)
(2)
2023 19th International Conference on Network and Service Management (CNSM)
VI. CLASSIFICATION BASED ON PERIODIC FEATURES
A. Creating datasets
Fig. 2. Example of FTS with the Clear periodic behavior
As we mentioned before, we experiment with the length of FTS by defining the time interval in which FTS are collected. The chosen time intervals are: 24h, 12h, 6h, 4h, 2h, 1h, 30m, 15m, and 10m. The IP flows were taken from the CESNET-MINER22 dataset, which was created by monitor- ing the CESNET28 network infrastructure by ipfixprobe9 — open-source flow exporter. The computed FTS created from the CESNET-MINER22 dataset and the datasets of periodic behaviors have been published on Zenodo [9].
Fig. 3. Example of FTS with the Sinusoidal periodic behavior
The number of created FTS depends on the size of the time interval. In the top left graph of Fig. 4, the number of FTS increases with the decreasing time interval. The number of constant FTS achieved the same trend as it can be seen on the left bottom graph of Fig. 4. However, the top right graph of Fig. 4 shows the number of tested FTS with at least ten datapoints, and it is not increasing with the same trend.
(cid:80)
i(mi−µm)3
, where mi is metric i-th value of metric m. The i(mi−µm)4
σ3 m
(cid:80)
Kurtosis is computed as K =
.
σ4 m
Furthermore, we use the Lomb-Scargle periodogram to generate the set of well-known frequency-based features listed below:
Min power, Max power — Represent the minimum and maximum power of the LS periodogram.
Frequency of min power, Frequency of max power — Describe the frequency of the minimum and maximum power of the LS periodogram.
Spectral bandwidth — Describes the difference between upper and lower frequencies at which spectral energy is half its maximum value.
Spectral centroid — Indicates at which frequency the energy of a spectrum is centred upon.
The number of periodic FTS depends on the settings of Scargle’s Significance Test (SST), i.e., Significance level and Percentage level. The right bottom graph of Fig. 4 shows the numbers of periodic FTS for each tested setting. The number of periodic FTS with Significance level equals to 0.1 has the same trend as the number of tested FTS. The number of periodic FTS with Significance level equals to 0.01 has decreasing trend with decreasing time intervals. And the number of periodic FTS with Significance level equal to 0.001 has a slightly increasing trend with decreasing time intervals. If we realize that the longer the time interval, the more accurate the periodicity test should be, and we observed the behavior just described, we can conclude that the correct SST setting should be Significance level equal to 0.01. Furthermore, we performed experiments with the settings of SST in classi- fication to obtain the best classification results (the following sections provide further information).
Spectral energy — Represents the total energy present at all frequencies in LS periodogram.
Spectral entropy — The degree of randomness or disor- der in the LS periodogram.
Spectral flatness — Estimates the uniformity of signal energy distribution in the frequency domain.
Spectral flux — The rate of change of periodogram power with increasing frequency.
The classification pipeline uses only flows from periodic FTS. The number of classified flows from non-periodic FTS is shown in Fig. 5. This figure shows results with SST Signif- icance level set to 0.01 a


y et al. [8] split the CESNET- MINER22 dataset into the Design and Evaluation parts. The Design part is for creating, tuning and selecting the best model and the Evaluation part is for the one-time evaluation of the best model from the Design part. This default split avoids overfitting and allows comparison of results with other works without variation by random sampling.
Spectral zero crossing rate — Refers to the rate of shift of the sign of a wave, which is the rate of change from negative to positive or the reverse.
8The Czech Educational and Science Network 9https://github.com/CESNET/ipfixprobe
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 UTC from IEEE Xplore. Restrictions apply.
2023 19th International Conference on Network and Service Management (CNSM)
Fig. 4. The figure presents the number of FTS, the number of tested FTS, and the number of constant FTS and periodic FTS in datasets of periodic behavior created from the CESNET-MINER22 dataset. The number of periodic FTS depends on Scargle’s Significance Test (SST) settings.
TABLE I SUMMARY OF BEST RESULTS WITH SETTINGS Significance level EQUAL TO 0.1 AND Percentage level EQUAL TO 0.9.
Time interval 24 h 12 h 6 h 4 h 2 h 1 h 30 m 15 m 10 m
Accuracy 93.63 93.31 93.37 94.19 94.34 94.86 95.13 95.19 94.92
Precision 83.49 87.82 90.01 92.24 93.44 94.21 96.11 95.43 95.16
Recall 74.19 69.27 74.87 78.88 80.46 84.39 87.45 89.21 88.88
F1-score 78.57 77.45 81.74 85.04 86.47 89.03 91.57 92.21 91.91
Fig. 5. The number of flows that are in periodic and non-periodic FTS.
In the design phase, we start with selection of the opti- mal ML algorithm by testing 11 well-known ML algorithms from which XGBoost, LightGBM and CatBoost algorithms achieved similar results. We choose the XGBoost algorithm. Our experiments ended similarly on each dataset.
After selecting the algorithm, we optimized the hyperparam- eters to get a suitable set that performs well on the dataset, yet does not cause overfitting. We use the hyperopt library [20] to tune the following hyperparameters: n estimators, max depth, gamma, reg alpha, reg lambda, min child weight, and col- sample bytree. This tuning phase results in the best settings of hyperparameters of the XGBoost classifier. We picked the best models in the design phase. The best models for each time interval were selected based on the evaluation metrics: Accuracy, Precision, Recall, and F1-score.
After the design phase, we evaluate selected models on the Evaluation part of the CESNET-MINER22 dataset. Source code of the classification pipeline and experiments are pub- lished on GitHub10.
C. Results of classification
The best results for settings Significance level equal to 0.1 and Percentage level equal to 0.9 are presented in Table I. As can be seen, the periodic features are more than suitable for cryptocurrency miners detection. Moreover, no False positives occur for each time interval.
Fig. 6. Feature importance
The results of the feature importance investigation for the trained model are shown in Fig. 6. We can see that the Clear periodic behavior features are one of the least important, but they cause a low false-positive rate as described by Koumar et al. [4].
For the deployment of the augmented DeCrypto system into networks for real-time detection, it is crucial to choose a proper time interval for FTS sampling and proper settings of the SST test. However, the best achieved results, presented in Table I, can not be used for selecting proper time interval because most of them achieved similar results. Moreover, the results can be strongly influenced by variation caused by the randomness that naturally occurs in splitting, training and tuning of ML models [21]. We evaluated the classification pipeline for each time interval 100 times. The results of
10https://github.com/koumajos/EnhancedDeCrypto
Authorized licensed use limited to: CZECH TECHNICAL UNIVERSITY. Downloaded on April 21,2025 at 18:18:55 




[2025-07-15 21:31:50,934:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 13.82 s.
[2025-07-15 21:31:50,935:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "sentiment": -4}
  	 	 	 	 		 		 		 	

[2025-07-15 21:31:51,274:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:31:51,274:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:31:51,274:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2024 20th International Conference on Network and Service Management (CNSM)
WIF: Efficient Library for Network Traffic Analysis
Richard Pln´y FIT CTU Prague, Czechia plnyrich@fit.cvut.cz
Karel Hynek FIT CTU & CESNET Prague, Czechia hynekkar@cesnet.cz
Pavel ˇSiˇska CESNET Prague, Czechia siska@cesnet.cz
Abstract—Network traffic classification and analysis are cru- cial for maintaining computer security. Nevertheless, the rise of encrypted traffic has made reliable threat detection increasingly challenging, requiring more complex algorithms such as heteroge- neous ensembles. These types of algorithms proved to be effective in complex threat detection while maintaining high accuracy and explainability. However, their complexity and time-consuming development process limit their widespread adoption. Therefore, we created a new library called Weak Indication Framework (WIF) for the faster development of heterogeneous ensembles, which minimizes the time between attack discovery and detection capability. Moreover, WIF-based detectors are efficient enough to operate on large Internet Service Provider networks—a single detector can protect millions of users. We demonstrate the effectiveness of the WIF library through four different detectors (TOR, Cryptomining, IoT Malware, and Tunnel detector), each achieving outstanding performance and quick deployment times. Index Terms—network security, traffic analysis, threat detecneous ensembles and shorten the deployment time of emerging threat detectors.
WIF is a novel library containing the essential primitive blocks that can be reused in the detection pipelines. Apart from multiple classifiers (such as regular expression, Machine Learning, blocklist, and more) and results-fusion functions, WIF also has storage capabilities to store detection context for a longer time period. Despite the fact that WIF was developed for high-performance deployments such as Internet Service Provider (ISP) networks or data centers, it can also be easi

[2025-07-15 21:31:51,274:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
2024 20th International Conference on Network and Service Management (CNSM)
WIF: Efficient Library for Network Traffic Analysis
Richard Pln´y FIT CTU Prague, Czechia plnyrich@fit.cvut.cz
Karel Hynek FIT CTU & CESNET Prague, Czechia hynekkar@cesnet.cz
Pavel ˇSiˇska CESNET Prague, Czechia siska@cesnet.cz
Abstract—Network traffic classification and analysis are cru- cial for maintaining computer security. Nevertheless, the rise of encrypted traffic has made reliable threat detection increasingly challenging, requiring more complex algorithms such as heteroge- neous ensembles. These types of algorithms proved to be effective in complex threat detection while maintaining high accuracy and explainability. However, their complexity and time-consuming development process limit their widespread adoption. Therefore, we created a new library called Weak Indication Framework (WIF) for the faster development of heterogeneous ensembles, which minimizes the time between attack discovery and detection capability. Moreover, WIF-based detectors are efficient enough to operate on large Internet Service Provider networks—a single detector can protect millions of users. We demonstrate the effectiveness of the WIF library through four different detectors (TOR, Cryptomining, IoT Malware, and Tunnel detector), each achieving outstanding performance and quick deployment times. Index Terms—network security, traffic analysis, threat detecneous ensembles and shorten the deployment time of emerging threat detectors.
WIF is a novel library containing the essential primitive blocks that can be reused in the detection pipelines. Apart from multiple classifiers (such as regular expression, Machine Learning, blocklist, and more) and results-fusion functions, WIF also has storage capabilities to store detection context for a longer time period. Despite the fact that WIF was developed for high-performance deployments such as Internet Service Provider (ISP) networks or data centers, it can also be easi

[2025-07-15 21:31:53,395:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.12 s.
[2025-07-15 21:31:53,396:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "paper_title": "Efficient Library for Network Traffic Analysis" }
     										

[2025-07-15 21:31:53,398:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:31:53,398:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:31:53,398:     INFO:        llm_utils.py:113 -            llm_query()] context is: 2024 20th International Conference on Network and Service Management (CNSM)
WIF: Efficient Library for Network Traffic Analysis
Richard Pln´y FIT CTU Prague, Czechia plnyrich@fit.cvut.cz
Karel Hynek FIT CTU & CESNET Prague, Czechia hynekkar@cesnet.cz
Pavel ˇSiˇska CESNET Prague, Czechia siska@cesnet.cz
Abstract—Network traffic classification and analysis are cru- cial for maintaining computer security. Nevertheless, the rise of encrypted traffic has made reliable threat detection increasingly challenging, requiring more complex algorithms such as heteroge- neous ensembles. These types of algorithms proved to be effective in complex threat detection while maintaining high accuracy and explainability. However, their complexity and time-consuming development process limit their widespread adoption. Therefore, we created a new library called Weak Indication Framework (WIF) for the faster development of heterogeneous ensembles, which minimizes the time between attack discovery and detection capability. Moreover, WIF-based detectors are efficient enough to operate on large Internet Service Provider networks—a single detector can protect millions of users. We demonstrate the effectiveness of the WIF library through four different detectors (TOR, Cryptomining, IoT Malware, and Tunnel detector), each achieving outstanding performance and quick deployment times. Index Terms—network security, traffic analysis, threat detecneous ensembles and shorten the deployment time of emerging threat detectors.
WIF is a novel library containing the essential primitive blocks that can be reused in the detection pipelines. Apart from multiple classifiers (such as regular expression, Machine Learning, blocklist, and more) and results-fusion functions, WIF also has storage capabilities to store detection context for a longer time period. Despite the fact that WIF was developed for high-performance deployments such as Internet Service Provider (ISP) networks or data centers, it can also be easi

[2025-07-15 21:31:53,398:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
2024 20th International Conference on Network and Service Management (CNSM)
WIF: Efficient Library for Network Traffic Analysis
Richard Pln´y FIT CTU Prague, Czechia plnyrich@fit.cvut.cz
Karel Hynek FIT CTU & CESNET Prague, Czechia hynekkar@cesnet.cz
Pavel ˇSiˇska CESNET Prague, Czechia siska@cesnet.cz
Abstract—Network traffic classification and analysis are cru- cial for maintaining computer security. Nevertheless, the rise of encrypted traffic has made reliable threat detection increasingly challenging, requiring more complex algorithms such as heteroge- neous ensembles. These types of algorithms proved to be effective in complex threat detection while maintaining high accuracy and explainability. However, their complexity and time-consuming development process limit their widespread adoption. Therefore, we created a new library called Weak Indication Framework (WIF) for the faster development of heterogeneous ensembles, which minimizes the time between attack discovery and detection capability. Moreover, WIF-based detectors are efficient enough to operate on large Internet Service Provider networks—a single detector can protect millions of users. We demonstrate the effectiveness of the WIF library through four different detectors (TOR, Cryptomining, IoT Malware, and Tunnel detector), each achieving outstanding performance and quick deployment times. Index Terms—network security, traffic analysis, threat detecneous ensembles and shorten the deployment time of emerging threat detectors.
WIF is a novel library containing the essential primitive blocks that can be reused in the detection pipelines. Apart from multiple classifiers (such as regular expression, Machine Learning, blocklist, and more) and results-fusion functions, WIF also has storage capabilities to store detection context for a longer time period. Despite the fact that WIF was developed for high-performance deployments such as Internet Service Provider (ISP) networks or data centers, it can also be easi

[2025-07-15 21:31:56,012:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.61 s.
[2025-07-15 21:31:56,012:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "publication_year": "}<think>Alright, let's break this down. I need to figure out the year the paper was published based on the provided text. Looking at the text, it starts with " } 

[2025-07-15 21:31:57,081:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:31:57,081:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


[2025-07-15 21:31:57,081:     INFO:        llm_utils.py:113 -            llm_query()] context is: Availableonline3January20241389-1286/©2024TheAuthor(s).PublishedbyElsevierB.V.ThisisanopenaccessarticleundertheCCBYlicense(http://creativecommons.org/licenses/by/4.0/).
ComputerNetworks240(2024)110147
Contents lists available at ScienceDirect
Computer Networks
journal homepage: www.elsevier.com/locate/comnet
NetTiSA: Extended IP flow with time-series features for universal bandwidth-constrained high-speed network traffic classification Josef Koumar a,∗, Karel Hynek b, Jaroslav Pešek a, Tomáš Čejka b a Czech Technical University in Prague, Faculty of Information Technology, Thákurova 9, 160 00 Prague 6, Czech Republic b CESNET a.l.e., Generála Píky 430/26, 160 00 Prague 6, Czech Republic
A B S T R A C T
A R T I C L E I N F O
Network traffic monitoring based on IP Flows is a standard monitoring approach that can be deployed to various network infrastructures, even the large ISP networks connecting millions of people. Since flow records traditionally contain only limited information (addresses, transport ports, and amount of exchanged data), they are also commonly extended by additional features that enable network traffic analysis with high accuracy. These flow extensions are, however, often too large or hard to compute, which then allows only offline analysis or limits their deployment only to smaller-sized networks. This paper proposes a novel extended IP flow called NetTiSA (Network Time Series Analysed) flow, based on analysing the time series of packet sizes. By thoroughly testing 25 different network traffic classification tasks, we show the broad applicability and high usability of NetTiSA flow. For practical deployment, we also consider the sizes of flows extended by NetTiSA features and evaluate the performance impacts of their computation in the flow exporter. The novel features proved to be computationally inexpensive and showed excellent discriminatory performance. The trained machine learning classifiers with proposed features mostly outperformed the stat

[2025-07-15 21:31:57,081:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What is the title of the provided paper?
Include only the paper title in your response.
Answer should look like this:
NetTiSA: Extended IP flow with time-series features for universal
bandwidth-constrained high-speed network traffic classification


    Respond in a JSON format as provided.

    ### Text:
    
Availableonline3January20241389-1286/©2024TheAuthor(s).PublishedbyElsevierB.V.ThisisanopenaccessarticleundertheCCBYlicense(http://creativecommons.org/licenses/by/4.0/).
ComputerNetworks240(2024)110147
Contents lists available at ScienceDirect
Computer Networks
journal homepage: www.elsevier.com/locate/comnet
NetTiSA: Extended IP flow with time-series features for universal bandwidth-constrained high-speed network traffic classification Josef Koumar a,∗, Karel Hynek b, Jaroslav Pešek a, Tomáš Čejka b a Czech Technical University in Prague, Faculty of Information Technology, Thákurova 9, 160 00 Prague 6, Czech Republic b CESNET a.l.e., Generála Píky 430/26, 160 00 Prague 6, Czech Republic
A B S T R A C T
A R T I C L E I N F O
Network traffic monitoring based on IP Flows is a standard monitoring approach that can be deployed to various network infrastructures, even the large ISP networks connecting millions of people. Since flow records traditionally contain only limited information (addresses, transport ports, and amount of exchanged data), they are also commonly extended by additional features that enable network traffic analysis with high accuracy. These flow extensions are, however, often too large or hard to compute, which then allows only offline analysis or limits their deployment only to smaller-sized networks. This paper proposes a novel extended IP flow called NetTiSA (Network Time Series Analysed) flow, based on analysing the time series of packet sizes. By thoroughly testing 25 different network traffic classification tasks, we show the broad applicability and high usability of NetTiSA flow. For practical deployment, we also consider the sizes of flows extended by NetTiSA features and evaluate the performance impacts of their computation in the flow exporter. The novel features proved to be computationally inexpensive and showed excellent discriminatory performance. The trained machine learning classifiers with proposed features mostly outperformed the stat

[2025-07-15 21:31:59,969:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.89 s.
[2025-07-15 21:31:59,969:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {"paper_title": "NetTiSA: Extended IP flow with time-series features for universal bandwidth-constrained high-speed network traffic classification"}

     			  				 	 			

[2025-07-15 21:31:59,972:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.

[2025-07-15 21:31:59,972:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


[2025-07-15 21:31:59,972:     INFO:        llm_utils.py:113 -            llm_query()] context is: Availableonline3January20241389-1286/©2024TheAuthor(s).PublishedbyElsevierB.V.ThisisanopenaccessarticleundertheCCBYlicense(http://creativecommons.org/licenses/by/4.0/).
ComputerNetworks240(2024)110147
Contents lists available at ScienceDirect
Computer Networks
journal homepage: www.elsevier.com/locate/comnet
NetTiSA: Extended IP flow with time-series features for universal bandwidth-constrained high-speed network traffic classification Josef Koumar a,∗, Karel Hynek b, Jaroslav Pešek a, Tomáš Čejka b a Czech Technical University in Prague, Faculty of Information Technology, Thákurova 9, 160 00 Prague 6, Czech Republic b CESNET a.l.e., Generála Píky 430/26, 160 00 Prague 6, Czech Republic
A B S T R A C T
A R T I C L E I N F O
Network traffic monitoring based on IP Flows is a standard monitoring approach that can be deployed to various network infrastructures, even the large ISP networks connecting millions of people. Since flow records traditionally contain only limited information (addresses, transport ports, and amount of exchanged data), they are also commonly extended by additional features that enable network traffic analysis with high accuracy. These flow extensions are, however, often too large or hard to compute, which then allows only offline analysis or limits their deployment only to smaller-sized networks. This paper proposes a novel extended IP flow called NetTiSA (Network Time Series Analysed) flow, based on analysing the time series of packet sizes. By thoroughly testing 25 different network traffic classification tasks, we show the broad applicability and high usability of NetTiSA flow. For practical deployment, we also consider the sizes of flows extended by NetTiSA features and evaluate the performance impacts of their computation in the flow exporter. The novel features proved to be computationally inexpensive and showed excellent discriminatory performance. The trained machine learning classifiers with proposed features mostly outperformed the stat

[2025-07-15 21:31:59,972:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: What year was the provided paper published?
Include only the year in your response.
Answer should look like this:
2022


    Respond in a JSON format as provided.

    ### Text:
    
Availableonline3January20241389-1286/©2024TheAuthor(s).PublishedbyElsevierB.V.ThisisanopenaccessarticleundertheCCBYlicense(http://creativecommons.org/licenses/by/4.0/).
ComputerNetworks240(2024)110147
Contents lists available at ScienceDirect
Computer Networks
journal homepage: www.elsevier.com/locate/comnet
NetTiSA: Extended IP flow with time-series features for universal bandwidth-constrained high-speed network traffic classification Josef Koumar a,∗, Karel Hynek b, Jaroslav Pešek a, Tomáš Čejka b a Czech Technical University in Prague, Faculty of Information Technology, Thákurova 9, 160 00 Prague 6, Czech Republic b CESNET a.l.e., Generála Píky 430/26, 160 00 Prague 6, Czech Republic
A B S T R A C T
A R T I C L E I N F O
Network traffic monitoring based on IP Flows is a standard monitoring approach that can be deployed to various network infrastructures, even the large ISP networks connecting millions of people. Since flow records traditionally contain only limited information (addresses, transport ports, and amount of exchanged data), they are also commonly extended by additional features that enable network traffic analysis with high accuracy. These flow extensions are, however, often too large or hard to compute, which then allows only offline analysis or limits their deployment only to smaller-sized networks. This paper proposes a novel extended IP flow called NetTiSA (Network Time Series Analysed) flow, based on analysing the time series of packet sizes. By thoroughly testing 25 different network traffic classification tasks, we show the broad applicability and high usability of NetTiSA flow. For practical deployment, we also consider the sizes of flows extended by NetTiSA features and evaluate the performance impacts of their computation in the flow exporter. The novel features proved to be computationally inexpensive and showed excellent discriminatory performance. The trained machine learning classifiers with proposed features mostly outperformed the stat

[2025-07-15 21:32:02,124:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 2.15 s.
[2025-07-15 21:32:02,125:     INFO:        llm_utils.py:155 -            llm_query()] full response is: {"publication_year": ":[{"

     }

    			  					      

[2025-07-15 21:32:02,137:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:32:02,137:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited the paper of your interest.
    The paper of interest describes a dataset of network data flow.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    The goal is to find out if the dataset was used by the authors of the paper, or whether it was only referenced.
    If the dataset was actually used, you can also figure out for what application it was used, but only if the paper mentions it explicitly.
    If the paper mentions f1-score or other classification metrics achieved using the dataset of interest, include it in the response.
    Answer should be only one phrase long.
    Aswer must only contain short structured response exactly as provided in following examples including brackets.
    Answer should look like this: [used, application: machine learning]
    Another example: [used, application: unknown]
    Another example: [cited]"
    

[2025-07-15 21:32:02,137:     INFO:        llm_utils.py:113 -            llm_query()] context is: ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:02,137:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited the paper of your interest.
    The paper of interest describes a dataset of network data flow.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    The goal is to find out if the dataset was used by the authors of the paper, or whether it was only referenced.
    If the dataset was actually used, you can also figure out for what application it was used, but only if the paper mentions it explicitly.
    If the paper mentions f1-score or other classification metrics achieved using the dataset of interest, include it in the response.
    Answer should be only one phrase long.
    Aswer must only contain short structured response exactly as provided in following examples including brackets.
    Answer should look like this: [used, application: machine learning]
    Another example: [used, application: unknown]
    Another example: [cited]"
    

    Respond in a JSON format as provided.

    ### Text:
    
ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:19,459:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 17.32 s.
[2025-07-15 21:32:19,462:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "dataset_application": "multiclass_classification_with_binary_features_and_categorical_labels_with_high不平衡_classes_and_small_number_of_samples_in_some_classes, the goal is to predict the type of network attack or legitimate activity from a set of features, which include both binary and categorical variables. The model needs to handle imbalanced datasets effectively, potentially using techniques like SMOTE or Synthetic data generation, ensemble methods such as Random Forests or XGBoost, and appropriate evaluation metrics like precision, recall, F1-score, and ROC-AUC."}

 	 	 	 									    

[2025-07-15 21:32:19,465:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:32:19,465:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find the key observations from our dataset.
    List only observations that are explicitly written in the paper.
    If you think there are no observations from our dataset mentioned or if you are not sure, reply just "no key observations found".
    List only observations regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    Reply in 5 or less single line points.
    

[2025-07-15 21:32:19,465:     INFO:        llm_utils.py:113 -            llm_query()] context is: ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:19,466:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find the key observations from our dataset.
    List only observations that are explicitly written in the paper.
    If you think there are no observations from our dataset mentioned or if you are not sure, reply just "no key observations found".
    List only observations regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    Reply in 5 or less single line points.
    

    Respond in a JSON format as provided.

    ### Text:
    
ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:36,596:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 17.13 s.
[2025-07-15 21:32:36,599:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "key_observations": "Okay, let me try to figure out what the user is asking for here. They provided a lengthy block of text that seems to be part of a research paper or a report related to network security classification tasks. The text includes sections like Results, Methodology, and several appendices with confusion matrices and feature importance figures. At first glance, it's pretty dense with technical details about different classification models, datasets, and metrics used in the study."

   	 						}

  	 									   			

[2025-07-15 21:32:36,602:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:32:36,602:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find any issues in our dataset.
    List only issues that are explicitly written in the paper.
    If you think there are no issues with our dataset mentioned or if you are not sure, reply just "no issues found".
    Also, list only issues regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    Reply in 5 or less single line points.
    

[2025-07-15 21:32:36,602:     INFO:        llm_utils.py:113 -            llm_query()] context is: ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:36,604:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to find any issues in our dataset.
    List only issues that are explicitly written in the paper.
    If you think there are no issues with our dataset mentioned or if you are not sure, reply just "no issues found".
    Also, list only issues regarding our dataset and therefore our paper.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    Reply in 5 or less single line points.
    

    Respond in a JSON format as provided.

    ### Text:
    
ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:55,723:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 19.12 s.
[2025-07-15 21:32:55,725:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "known_issues": "The codebase contains multiple security vulnerabilities, including weak encryption protocols and outdated firewalls, which could be exploited by malicious actors to gain unauthorized access to the network infrastructure. Additionally, there are issues with user authentication mechanisms that could be bypassed, potentially leading to unauthorized system access or data breaches. The system's logging mechanisms are also inadequate, making it difficult to track and respond to security incidents in a timely manner. Furthermore, the codebase lacks proper access control measures, such as role-based access control (RBAC) and least privilege principles, which could facilitate improper access by unauthorized personnel. Lastly, there are concerns regarding the maintenance of the codebase, with significant delays in fixing reported issues and implementing necessary security patches."

  }

  	 	 			           

[2025-07-15 21:32:55,731:     INFO:        llm_utils.py:111 -            llm_query()] system prompt is: You are a researcher in computer science and you analyze scientific papers and datasets.
    You answer only the truth, based on the facts from the given text.
    You are focused on quality and properties of datasets.
    You are filling out a structured analysis, so your responses must be short and information dense.

[2025-07-15 21:32:55,731:     INFO:        llm_utils.py:112 -            llm_query()] prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to evaluate sentiment in which paper talks about our dataset.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    Answer can contain only the sentiment rating (number from -5 to 5, -5 is very negative, 0 is neutral, 5 is very positive).
    ### Example:
    1
    ### Example:
    -4
    

[2025-07-15 21:32:55,731:     INFO:        llm_utils.py:113 -            llm_query()] context is: ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:32:55,732:     INFO:        llm_utils.py:118 -            llm_query()] full prompt is: These are snippets from a scientific paper which has cited our paper.
    Our paper describes a dataset of network data flow.
    Your goal is to evaluate sentiment in which paper talks about our dataset.
    The dataset you are interested in is called CESNET-MINER22 and its paper has reference number of [24].
    Answer can contain only the sentiment rating (number from -5 to 5, -5 is very negative, 0 is neutral, 5 is very positive).
    ### Example:
    1
    ### Example:
    -4
    

    Respond in a JSON format as provided.

    ### Text:
    
ch series and it can
To find the best-performing classifiers for each dataset, we used common scientific manuscript aggregators such as IEEE Explore,7 ACM Digital Library,8 Scopus,9 and Google Scholar.10 We either listed arti- cles that referenced concerned datasets or searched for the names of
7 https://ieeexplore.ieee.org/ 8 https://dl.acm.org/ 9 https://www.scopus.com/ 10 https://scholar.google.com/
ComputerNetworks240(2024)1101475
J. Koumar et al.
Table 1 Summary of datasets and related works for binary and multiclass classification. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The Accuracy, F1-score, macro and weighted average F1-score are presented in percent [%].
Binary classification
Task
Dataset
Approach
Telemetry
Accuracy
F1-score
Botnet detection
CTU-13 [53]
Stergiopoulos et al. [54]
1,000
99.85
99.90
Brute-force detection
HTTPS Brute-force [55]
Luxemburk et al. [56]
180
99.93
96.26
Mining detection
CESNET-MINER22 [57]
Plný et al. [24]
680
93.72
90.59
DNS malware detection
CIC-Bell-DNS [15]
Kumaar et al. [58]
540
99.19
99.20
CIC-DoH-Brw [59] DoH-Real-World [61]
Behnke et al. [60] Jeřábek et al. [13]
116 0
– 97.5
99.8 98.7
DoH detection
DoS attack detection
Bot-IoT [62]
Shafiq et al. [63]
176
99.99
99.99
IoT-23 [64] Edge-IIoTset [66] TON_IoT [68]
Sahu et al. [65] Khacha et al. [67] Dai et al. [69]
144 472 912
96 99.99 99.29
96 99.99 99.03
IoT malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
Agrafiotis et al. [44] Nawir et al. [71]
3,136 172
98.5 94.37
95.4 94.54
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
Dai et al. [69]
912
99.99
99.65
ISCX-VPN-2016 [73] VNAT [74]
Aceto et al. [34] Jorgense et al. [74]
1,296 3,612
93.75 91.95 98.00
VPN detection
Multiclass classification
Task
Dataset
Approach
Telemetry
Accuracy
Macro avg. F1
Weighted avg. F1
Botnet classification
CTU-13 [53]
Marín et al. [75]
200
99.72
76.04
98.00
IoT malware classification
Edge-IIoTset [66] TON_IoT [68]
Khacha et al. [67] Tareq et al. [76]
472 2,832
98.69 98.50
– 52.20
– 98.57
CIC-IDS-2017 [43] UNSW-NB15 [70]
Kunang et al. [77] Madwanna et al. [18]
784 472
95.79 82.21
84.54 53.15
95.11 80.30
IDS classification
TOR classification
ISCX-Tor-2016 [72]
Dai et al. [69]
912
97.95
86.77
ISCX-VPN-2016 [73] VNAT [74]
Dener et al. [78] Jorgense et al. [74]
264 3,612
89.29 96
87.83 90.49 VPN classification
Fig. 1. The shares of network flows in selected tasks that can (cannot) be captured by SPLT of length 30.
also change in time—thus, the analysis failure with evenly spaced time series is inevitable [27].
complexity in mind when designing the feature vector, to ensure the possibility of practical deployment.
However, the data can be used without aggregation. That means a time series of observations {𝑋𝑛} = {𝑥1,𝑥2,…,𝑥𝑛} taken at times {𝑇𝑛} = {𝑡1,𝑡2,…,𝑡𝑛} does not have constant 𝛿𝑗 = 𝑡𝑗+1 − 𝑡𝑗,∀𝑗 ∈ {1,…,𝑛 − 1}. This type of time series is called unevenly (or unequally/ irregularly) spaced.
4.2. Network traffic classification using time series analysis
The benefit of an unevenly spaced time series can be seen in Fig. 2, where each traffic type generates different patterns of packet sizes in time. These patterns can be captured by time series analysis [27]; thus, time series analysis features are an ideal candidate for a universal feature vector.
The unevenly-spaced time series from network traffic does not require any aggregation; moreover, they do not contain any trends and seasonality [27], which makes them more suitable for network traffic classification. Since there is already an advanced mathemati- cal theory around unevenly-spaced time series (mainly in astronomy and medicine), we can use the mathematical methods and tools for their analysis to form a feature vector describing the properties of the communication and use it for network traffic classification [26]. Nevertheless, we also need to keep the computational and memory
In our previously published work [26], we creat


ets in a direction from as source to destination IP address and 𝑑0 the opposite direction. Both 𝑑1 and 𝑑0 are features of the classical bidirectional flow.
𝑑1 𝑑1+𝑑0
If they are all in the direction from the source to the destination, then the percentage is 100%; if they are all from the destination to the source, then the percentage is 0%.
11 If no packet is observed within the ‘‘inactive timeout’’ period, the flow is considered terminated. Flows longer than the ‘‘active timeout’’ are split and are exported every time this timeout elapses.
12 We used stratified sampling so that the original ratio of label classes
Duration is the duration of the flow.
remains in the split parts.
ComputerNetworks240(2024)1101478
J. Koumar et al.
Table 2 Description of NetTiSA flow datasets created from original datasets.
Binary classification
Task
Original dataset
Labels [%]
Sizes of datasets
False
True
Train
Validation
Test
Botnet detection
CTU-13 [53]
88.57
11.43
194,928
83,540
50,000
Mining detection
CESNET-MINER22 [57]
64.97
35.03
1,417,433
607,470
1,075,576
DNS Malware detection
CIC-Bell-DNS-2021 [15]
96.04
3.96
3,761
1,613
1,000
CIC-DoHBrw-2020 [59] DoH Real-world [61]
69.48 1.52
30.52 98.47
623,952 3,564,331
267,408 1,527,571
100,000 500,000
DoH detection
DoS detection
Bot-IoT [62]
97.40
2.59
2,106,874
902,946
1,000,000
Brute-force detection
HTTPS Brute-force [55]
95.71
4.29
646,366
277,014
100,000
Edge-IIoTset [66] IoT-23 [64] TON_IoT [68]
92,95 24.56 0.31
7,05 75.44 99.69
827,557 2,492,447 2,077,190
354,668 1,068,192 890,224
250,000 500,000 500,000
IoT Malware detection
CIC-IDS-2017 [43] UNSW-NB15 [70]
77.60 96.50
22.40 3.50
1,182,652 954,370
506,850 409,016
500,000 584,309
Intrusion detection
TOR detection
ISCX-Tor-2016 [72]
98.99
1.01
19,200
8,229
11,756
ISCX-VPN-2016 [73] VNAT [74]
90.54 96.61
9.46 3.39
135,715 23,380
58,164 10,020
50,000 10,000
VPN detection
Multiclass classification
Task
Original dataset
Sizes of datasets
Train
Validation
Test
All binary classificationa
10,934,721
4,686,309
4,000,000
[15,43,53,55,57,59,61, 62,64,66,68,70,72–74]
All multiclass classificationa
7,127,894
3,054,812
9,999,803
Botnet classification
CTU-13 [53]
106,212
45,519
25,000
CIC-IDS-2017 [43] UNSW-NB15 [70]
1,392,651 954,370
596,851 409,016
200,000 584,309
Intrusion classification
Edge-IIoTset [66] TON_IoT [68]
827,557 2,252,190
354,668 965,224
250,000 250,000
IoT Malware classification
TOR classification
ISCX-Tor-2016 [72]
70,557
30,239
20,000
ISCX-VPN-2016 [73] VNAT [74]
12,655 23,380
5,423 10,020
5,000 10,000
VPN classification
a Task was created by merging all relevant datasets (see Section 6.1.3).
Fig. 3. Experimental process for design and evaluation of ML algorithms trained using NetTiSA.
The test part was not used during any stage of the classifier design, ensuring the fairness of model evaluation on data that was not seen before. The source codes of our whole classification pipeline, including the pre-processing and the final settings of the hyperparameters for each classification problem, are publicly available in our repository.13
using the previously defined metrics. For each metric, a higher value means better performance of the classifier; both accuracy and F1 score metrics are considered in the evaluation separately. Moreover, we also compare the performance with our previously published results (TSA of SFTS) [26], to show the comparison between two types of universal time-series-based features.
6.1. Classification results
6.1.1. Binary classification
The results of binary classification are graphically presented in Fig. 4. We also provide detailed results in Appendix, in Tables A.8 and B.10.
In this section, we present classification performance on 25 network classification tasks using 15 publicly available and well-known network traffic datasets (listed in Table 2). The tasks can be separated into 15 binary classification tasks, 8 multiclass classification tasks, and two special multiclass classification tasks. The performance of 


ier from related works.14 On six binary classification tasks, the Enhanced NetTiSA features performed significantly better—it achieved more than
13 https://github.com/koumajos/Classification_by_NetTiSA_flow
14 The best-performing related work for each dataset is listed in Table 1.
ComputerNetworks240(2024)1101479
J. Koumar et al.
Fig. 4. Comparison of binary classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy and F1-score (in %).
Fig. 5. Comparison of multiclass classification by best-related works, complete feature set based on TSA of SFTS and Enhanced NetTiSA feature set. We compare approaches by Accuracy, and macro and weighted average F1-score (in %).
1% increase in accuracy measure or F1 score compared to related works. Our approach achieves more than 1% increase in problems of detecting cryptomining, IoT malware, intrusion, and VPN. Especially, the detection of crypto mining using the CESNET-MINER22 dataset and VPN using the ISCX-VPN-2016 dataset achieves a better F1 score by more than 5%. Nevertheless, with the TOR detection problem and Intrusion detection on the UNSW-NB-15 dataset, we observed a slightly worse F1 score than the best-performing classifier from the related works.
When we compare the Enhanced NetTiSA discriminative perfor- mance with universal Time-Series Analysis features (TSA of SFTS) from our previous work [26], we can see (in Fig. 4) that the re- sults are mostly similar. The TSA of SFTS features show significantly better discriminative performance (when concerning the F1-score) in the ISCX-VPN-2016 and UNSW-NB-15 datasets. On the other hand, the NetTiSA is significantly better on the CESNET-MINER22 dataset. The overall comparison of the binary classification is summarized in Table 3.
We investigated the related work of Intrusion detection on the UNSW-NB-15 dataset. The classifier published by Nawir et al. [71] indeed performed significantly better by the means of F1-score (by 5.75%), but their accuracy is significantly worse than that of our approach (by 4.85%). The increased F1 score can be attributed to the application-layer-based features (such as from HTTP headers) that would not be applicable in encrypted traffic analysis.
6.1.2. Multiclass classification
The results of multiclass classification are presented in Fig. 5. Fur- thermore, the detailed results are also presented in the Appendix, Tables A.9, B.11, B.12, B.13, B.14, B.15, B.16, B.17, and B.18. Similarly, as in binary classification, the Enhanced NetTiSA features proved to be discriminatory in the multiclass classification. It outperformed most of the best-performing classifiers proposed in related works (listed in Table 1). Specifically, in five out of eight cases (botnet families, IoT malware families, intrusion type, and VPN traffic type), we achieved more than a 1% classification performance increase compared to best- performing related works. Especially, the classification of intrusion type with NetTiSA features extracted from the UNSW-NB15 dataset achieves a better F1 score by more than 15%. However, we observed a slight decrease in two cases—TON_IoT and TOR classification.
We also investigated the difference between the TOR classifier published by Dai et al. [69], which extends flow data for the first 32 packets and also 600 bytes of payload. The payload information gives their classifier an advantage since the classifier can fit the unencrypted TLS handshake data. Since TOR usually does not use some common TLS extensions, e.g., Server Name Indication, the TOR TLS handshakes in the dataset are specific and easily recognizable by payload-based analysis. The raw payload data gives Dai et al. an advantage, but also result in much larger flow records (as shown in the next section).
ComputerNetworks240(2024)11014710
J. Koumar et al.
Table 3 Comparison of average results of binary and multiclass classification based on NetTiSA flows with cla


6] NetTiSA Agrafiotis et al. [44] TSA of SFTS [26] NetTiSA Nawir et al. [71] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Aceto et al. [34] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 1,000 276 52 680 276 52 540 276 52 116 276 52 0 276 52 180 276 52 176 276 52 144 276 52 472 276 52 912 276 52 3,136 276 52 172 276 52 912 276 52 1,296 276 52 3,612 276 52
Accuracy 99.85 99.98 99.95 93.72 95.29 97.32 99.19 100.0 100.0 – 99.90 99.89 97.5 97.79 97.79 99.93 99.99 99.98 99.99 100.0 100.0 96 99.86 99.85 99.99 99.99 100.0 99.29 99.96 99.95 98.5 99.89 99.75 94.37 98.48 99.22 99.99 99.84 99.91 93.75 94.35 98.64 – 99.98 99.96
F1-score 99.90 99.93 99.79 90.59 93.11 96.19 99.20 100.0 100.0 99.8 99.84 99.83 98.7 98.80 98.80 96.26 99.83 99.80 99.99 100.0 99.98 96 99.91 99.90 99.99 99.97 99.98 99.03 99.98 99.97 95.4 99.75 99.43 94.54 98.50 88.79 99.65 96.33 97.24 91.95 95.48 92.64 98.00 99.73 99.35
Botnet detection
CTU-13 [53]
Mining detection
CESNET-MINER22 [57]
DNS Malware detection
CIC-Bell-DNS [15]
CIC-DoH-Brw [59]
DoH detection
DoH-Real-world [61]
Brute force detection
HTTPS Brute-force [55]
DoS detection
Bot-IoT [62]
IoT-23 [64]
IoT Malware detection
Edge-IIoTset [66]
TON_IoT [68]
CIC-IDS-2017 [43]
Intrusion detection
UNSW-NB15 [70]
TOR detection
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN detection
VNAT [74]
ComputerNetworks240(2024)11014716
J. Koumar et al.
Table A.9 Comparison of results of multiclass classification based on Enhanced NetTiSA feature set with best-related work on the same dataset. We compare results by Accuracy in %, Macro average F1-score in %, and Weighted average F1-score in %. The Telemetry column represents the size of the flow extension (the classical flow has an extension size equal to zero). The green background colour marks fields where classification based on the NetTiSA flow is at least 1% better than the best-related work. The red background colour marks fields where classification based on the NetTiSA flow is at least 1% worse than the best-related work. The grey background colour marks the rest fields.
Task
Dataset
Approach Marín et al. [75] TSA of SFTS [26] NetTiSA Khacha et al. [67] TSA of SFTS [26] NetTiSA Tareq et al. [76] TSA of SFTS [26] NetTiSA Kunang et al. [77] TSA of SFTS [26] NetTiSA Madwanna et al. [18] TSA of SFTS [26] NetTiSA Dai et al. [69] TSA of SFTS [26] NetTiSA Dener et al. [78] TSA of SFTS [26] NetTiSA Jorgense et al. [74] TSA of SFTS [26] NetTiSA
Telelemetry 200 276 52 472 276 52 2,832 276 52 784 276 52 472 276 52 912 276 52 264 276 52 3,612 276 52
Accuracy 99.72 99.73 99.85 98.69 99.97 99.96 98.50 97.53 96.06 95.79 99.93 99.86 82.21 95.60 98.85 97.95 95.48 96.36 89.29 94.80 94.04 96 98.60 99.29
Macro average F1 76.04 82.79 89.31 – 89.75 89.01 52.20 81.02 82.82 84.54 83.23 88.70 53.15 40.22 67.90 86.77 79.87 84.46 87.83 91.21 89.66 – 98.88 98.92
Weighted average F1 98.00 99.73 99.84 – 99.97 99.96 98.57 97.51 96.01 95.11 99.92 99.85 80.30 95.08 98.78 – 95.20 96.16 90.49 94.77 94.00 – 98.60 99.29
Botnet classification
CTU-13 [53]
Edge-IIoTset [66]
IoT Malware classification
TON_ IoT [68]
CIC-IDS-2017 [43]
Intrusion classification
UNSW-NB15 [70]
TOR classification
ISCX-Tor-2016 [72]
ISCX-VPN-2016 [73]
VPN classification
VNAT [74]
Appendix B. Confusion matrices
The confusion matrices for all evaluated classificaiton tasks are provided in Tables B.10–B.18.
Table B.10 Confusion matrix for each binary classification problem. The first row represents the ‘‘False’’ labels, and the second row represents the ‘‘True’’ labels in the dataset. The first column represents predicted ‘‘False’’, and the second column is predicted ‘‘True’’ values by the classifier.
Botnet
Cryptomining
DoH – RealWorld
DoH – CIC
DNS Malware
23,398 2
4 1,596
682,969 28,812
30 363,765
26,815 2,103
14,006 457,076
69,516 78
28 30,378
959 5
1 35
DoS
IoT – Edge-IIoT
HTTPS Brute-force
IDS – CIC
IDS – UNSW
984,942 6
0 15,052
232,541 4
4 17,451
95,663 14
3 4,320
287,752 721
5


 A
c i r e n e G
s t i o l p x E
s r e z z u F
s
r a e l C
m r o W
S o D
0 0 0 0 0 0 0 0 0 0
0 1,892 14 0 2 0 0 84 0 0
89 5 563,592 78 304 2,358 28 19 8 1
1 2 13 225 60 4 15 2 5 0
11 32 341 623 6234 41 245 281 35 21
0 0 1,352 19 35 3,228 13 5 0 0
0 5 41 24 105 3 795 2 5 1
0 4 141 20 156 3 2 2,907 0 0
0 4 31 12 36 1 4 0 363 0
0 1 0 3 13 0 0 0 0 23
Analysis Backdoor Clear DoS Exploits Fuzzers Generic Reconnaissance Shellcode Worms
s l e b a l
e u r T
Table B.18 Confusion matrix for multiclass classification of TOR.
Predicted labels
R E F S N A R T
G N I S W O R B
O D U A
O E D I V
T A H C
L I A M
P I O V
P 2 P
I
E L I F
518 23 4 2 1 0 11 6
41 8,038 26 7 23 71 199 37
0 2 63 0 0 0 1 1
0 1 1 566 0 3 4 1
1 1 0 0 63 0 0 0
27 99 6 13 6 9,542 17 15
2 29 7 3 1 0 332 13
8 2 7 0 0 3 3 150
AUDIO BROWSING CHAT FILE TRANSFER MAIL P2P VIDEO VOIP
s l e b a l
e u r T
Appendix C. Description of merged multiclass dataset
The complex multiclass dataset was created from following datasets: 1.CTU-13 [53], 2.CESNET-MINER22 [57], 3.CIC-Bell-DNS [15], 4.DoH- Real-world [61], 5.CIC-DoH-Brw [59], 6.Bot-IoT [62], 7.HTTPS Brute-force [55], 8.CIC-IDS-2017 [43], 9.UNSW-NB-15 [70], 10.Edge-IIoTset [87], 11.IoT-23 [64], 12.TON_IoT [68], 13.ISCX-Tor-2016 [72], and 14.ISCX-VPN-2016 [73], and 15.VNAT [74].
In the created dataset, we merge classes with the same traffic resulting in the following 44 classes: Botnet-Neris, Clear, Botnet-RBot, Botnet- Fast_flux, Botnet-Donbot, Botnet-Sogou, Botnet-Qvod, Cryptomining, DNS-malware, DoH, Backdoor, DoS, MitM, OS_fingerprinting, Password_attack, Scanning, Ransomware, Injection, Uploading_attack, Vulnerability_scanner, XSS, HTTPS-Brute-force, Bot, PortScan, Infiltration, FTP-Patator, SSH- Patator, Heartbleed, AUDIO, BROWSING, CHAT, File Transfer, EMAIL, P2P, VIDEO, VOIP, Fuzzers, Exploits, Shellcode, Worms, Reconnaissance, Backdoor, Analysis, and C2.
ComputerNetworks240(2024)11014719
J. Koumar et al.
Appendix D. Feature importance
The individual feature importances across the evaluated classification tasks are shown in Figs. D.10–D.12.
Fig. D.10. Feature importance for multiclass classification.
Fig. D.11. Feature importance for classification on all dataset merged into multiclass problem with 44 classes.
ComputerNetworks240(2024)11014720
J. Koumar et al.
Fig. D.12. Feature importance for binary classification.
ComputerNetworks240(2024)11014721
J. Koumar et al.





[2025-07-15 21:33:09,204:     INFO:        llm_utils.py:154 -            llm_query()] response generated in 0.0 min, 13.47 s.
[2025-07-15 21:33:09,207:     INFO:        llm_utils.py:155 -            llm_query()] full response is: { "sentiment": 0 }
        												

